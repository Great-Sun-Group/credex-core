name: Wipe AWS Resources

on:
  workflow_dispatch:

jobs:
  wipe:
    name: Wipe AWS Resources
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/prod' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}
    env:
      TF_VAR_domain_base: mycredex.app
      TF_VAR_subdomain_development: dev.api
      TF_VAR_subdomain_staging: stage.api
      TF_VAR_subdomain_production: api
      TF_VAR_operation_type: delete

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set environment
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/stage" ]]; then
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=development" >> $GITHUB_ENV
          fi
          echo "TF_VAR_environment=$ENVIRONMENT" >> $GITHUB_ENV
          echo "Setting environment to: $ENVIRONMENT"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Create Terraform Variables File
        run: |
          cat << EOF > terraform/terraform.tfvars
          environment = "$ENVIRONMENT"
          operation_type = "delete"
          EOF

      - name: Terraform Init and Workspace Selection
        run: |
          cd terraform
          terraform init
          terraform workspace select $ENVIRONMENT || terraform workspace new $ENVIRONMENT

      - name: Terraform Destroy
        run: |
          cd terraform
          terraform destroy -auto-approve -var-file=terraform.tfvars || echo "Terraform destroy failed, continuing with manual resource deletion"

      - name: Wipe Orphaned Resources
        run: |
          # (Keep the existing resource deletion functions here)

          # Run wipe functions in order
          wipe_ecs_resources
          wipe_ec2_instances
          wipe_load_balancers
          wipe_security_groups
          wipe_acm_certificates
          wipe_vpcs

          echo "Manual resource deletion completed"

      - name: Clear Terraform State
        run: |
          cd terraform
          # Remove local state
          rm -rf terraform.tfstate*
          rm -rf .terraform
          rm -rf terraform.tfstate.d
          
          # If using S3 backend, remove state from S3
          if grep -q "backend \"s3\"" *.tf; then
            BUCKET_NAME=$(grep -A 3 "backend \"s3\"" *.tf | grep "bucket" | cut -d '"' -f 2)
            KEY_NAME=$(grep -A 3 "backend \"s3\"" *.tf | grep "key" | cut -d '"' -f 2)
            aws s3 rm s3://$BUCKET_NAME/$KEY_NAME
            echo "Removed Terraform state from S3 bucket: $BUCKET_NAME, key: $KEY_NAME"
          fi
          
          echo "Terraform state cleared"

      - name: Verify Wipe
        run: |
          cd terraform
          terraform init -input=false
          if terraform show -json 2>/dev/null | jq -e '.values.root_module.resources' >/dev/null 2>&1; then
            echo "Error: Resources still exist after wipe"
            terraform show
            exit 1
          else
            echo "All resources have been successfully wiped"
          fi

      - name: Log Wipe
        if: success()
        run: |
          echo "Wipe of $ENVIRONMENT environment completed successfully at $(date)"

      - name: Notify on Failure
        if: failure()
        run: |
          echo "Wipe of $ENVIRONMENT environment failed. Please check the logs for more information."
