name: Cleanup AWS Resources

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to clean up"
        required: true
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  cleanup:
    name: Cleanup AWS Resources
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    env:
      TF_VAR_aws_region: af-south-1

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TF_VAR_aws_region }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init and Workspace Selection
        run: |
          cd terraform
          terraform init
          terraform workspace select ${{ github.event.inputs.environment }} || terraform workspace new ${{ github.event.inputs.environment }}

      - name: Terraform Destroy
        run: |
          cd terraform
          terraform destroy -auto-approve -var="create_resources=false"

      - name: Cleanup Orphaned Resources
        run: |
          cd terraform
          
          # Function to get all AWS resources with our project tag
          get_aws_resources() {
            local resource_type=$1
            aws $resource_type describe-${resource_type}s --query "${resource_type}s[?Tags[?Key=='Project' && Value=='CredEx']].${resource_type}Id" --output text
          }

          # Function to remove a resource
          remove_resource() {
            local resource_type=$1
            local resource_id=$2
            aws $resource_type delete-${resource_type} --${resource_type}-id $resource_id
            echo "Removed $resource_type: $resource_id"
          }

          # Cleanup process for each resource type
          cleanup() {
            local resource_type=$1
            echo "Identifying orphaned $resource_type resources..."
            orphaned_resources=$(get_aws_resources $resource_type)
            
            if [ -z "$orphaned_resources" ]; then
              echo "No orphaned $resource_type resources found."
            else
              echo "The following orphaned $resource_type resources were found:"
              echo "$orphaned_resources"
              
              for resource in $orphaned_resources; do
                remove_resource $resource_type $resource
              done
            fi
          }

          # Run cleanup for different resource types
          cleanup "instance"
          cleanup "security-group"
          cleanup "vpc"
          cleanup "subnet"
          cleanup "load-balancer"
          cleanup "ecs-cluster"
          cleanup "ecs-service"

      - name: Verify Cleanup
        run: |
          cd terraform
          if terraform show; then
            echo "Error: Resources still exist after cleanup"
            exit 1
          else
            echo "All resources have been successfully removed"
          fi

      - name: Log Cleanup
        if: success()
        run: |
          echo "Cleanup of ${{ github.event.inputs.environment }} environment completed successfully at $(date)"

      - name: Notify on Failure
        if: failure()
        run: |
          echo "Cleanup of ${{ github.event.inputs.environment }} environment failed. Please check the logs for more information."
          # Add notification mechanism here (e.g., send an email, Slack message, etc.)
