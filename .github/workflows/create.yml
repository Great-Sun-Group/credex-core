name: Initial Deployment to AWS

on:
  workflow_dispatch:

jobs:
  deploy:
    name: Initial AWS Deployment
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/prod' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}
    env:
      TF_VAR_domain_base: mycredex.app
      TF_VAR_subdomain_development: dev.api
      TF_VAR_subdomain_staging: stage.api
      TF_VAR_subdomain_production: api
      TF_VAR_neo4j_instance_count_development: 2
      TF_VAR_neo4j_instance_count_staging: 2
      TF_VAR_neo4j_instance_count_production: 2
      TF_VAR_neo4j_instance_type_development: t3.xlarge
      TF_VAR_neo4j_instance_type_staging: r5.2xlarge
      TF_VAR_neo4j_instance_type_production: r5.12xlarge
      TF_VAR_log_level_development: debug
      TF_VAR_log_level_staging: info
      TF_VAR_log_level_production: info
      TF_VAR_operation_type: create

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Environment
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/stage" ]]; then
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=development" >> $GITHUB_ENV
          fi
          echo "NODE_ENV=$ENVIRONMENT" >> $GITHUB_ENV
          echo "TF_VAR_environment=$ENVIRONMENT" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check Critical Secrets
        run: |
          if [ -z "${{ secrets.AWS_ACCESS_KEY }}" ] || [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ] || [ -z "${{ secrets.AWS_REGION }}" ] || [ -z "${{ secrets.NEO4J_ENTERPRISE_LICENSE }}" ]; then
            echo "Error: One or more critical secrets are missing. Please check your GitHub repository settings."
            exit 1
          fi

      - name: Create Terraform Variables File
        run: |
          cat << EOF > terraform/terraform.tfvars
          environment = "$ENVIRONMENT"
          operation_type = "create"
          jwt_secret = "${{ secrets.JWT_SECRET }}"
          open_exchange_rates_api = "${{ secrets.OPEN_EXCHANGE_RATES_API }}"
          neo4j_enterprise_license = "${{ secrets.NEO4J_ENTERPRISE_LICENSE }}"
          neo4j_ledger_space_user = "${{ secrets.NEO4J_LEDGER_SPACE_USER }}"
          neo4j_ledger_space_pass = "${{ secrets.NEO4J_LEDGER_SPACE_PASS }}"
          neo4j_search_space_user = "${{ secrets.NEO4J_SEARCH_SPACE_USER }}"
          neo4j_search_space_pass = "${{ secrets.NEO4J_SEARCH_SPACE_PASS }}"
          neo4j_public_key = "${{ secrets.NEO4J_PUBLIC_KEY }}"
          EOF

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init and Workspace Selection
        run: |
          cd terraform
          terraform init
          terraform workspace select $ENVIRONMENT || terraform workspace new $ENVIRONMENT

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform
          terraform plan -out=tfplan -var-file=terraform.tfvars

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        id: tf-outputs
        run: |
          cd terraform
          echo "Retrieving Terraform outputs..."
          TF_OUTPUT=$(terraform output -json | sed '1d' | tr -d '\n' | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//' | sed 's/::debug::.*$//')
          
          echo "Attempting to parse JSON..."
          if echo "$TF_OUTPUT" | jq empty 2>/dev/null; then
            echo "Valid JSON output"
            echo "$TF_OUTPUT" | jq '.'
          else
            echo "Invalid JSON output. Error from jq:"
            echo "$TF_OUTPUT" | jq empty 2>&1
            echo "Raw content of Terraform output:"
            echo "$TF_OUTPUT"
            exit 1
          fi

          echo "Parsing Terraform outputs..."
          ECR_REPO_URL=$(echo "$TF_OUTPUT" | jq -r '.ecr_repository_url.value // empty')
          ECS_CLUSTER_ARN=$(echo "$TF_OUTPUT" | jq -r '.ecs_cluster_arn.value // empty')
          ECS_TASK_DEF_ARN=$(echo "$TF_OUTPUT" | jq -r '.ecs_task_definition_arn.value // empty')
          NEO4J_LEDGER_URL=$(echo "$TF_OUTPUT" | jq -r '.neo4j_ledger_space_bolt_url.value // empty')
          NEO4J_SEARCH_URL=$(echo "$TF_OUTPUT" | jq -r '.neo4j_search_space_bolt_url.value // empty')

          if [ -z "$ECR_REPO_URL" ] || [ -z "$ECS_CLUSTER_ARN" ] || [ -z "$ECS_TASK_DEF_ARN" ] || [ -z "$NEO4J_LEDGER_URL" ] || [ -z "$NEO4J_SEARCH_URL" ]; then
            echo "One or more Terraform outputs are empty"
            exit 1
          fi

          echo "ECR_REPO_URL=${ECR_REPO_URL}" >> $GITHUB_ENV
          echo "ECS_CLUSTER_ARN=${ECS_CLUSTER_ARN}" >> $GITHUB_ENV
          echo "ECS_TASK_DEF_ARN=${ECS_TASK_DEF_ARN}" >> $GITHUB_ENV
          echo "TF_VAR_neo4j_ledger_space_bolt_url=${NEO4J_LEDGER_URL}" >> $GITHUB_ENV
          echo "TF_VAR_neo4j_search_space_bolt_url=${NEO4J_SEARCH_URL}" >> $GITHUB_ENV

          echo "Parsed Terraform Outputs:"
          echo "ECR_REPO_URL: ${ECR_REPO_URL}"
          echo "ECS_CLUSTER_ARN: ${ECS_CLUSTER_ARN}"
          echo "ECS_TASK_DEF_ARN: ${ECS_TASK_DEF_ARN}"
          echo "NEO4J_LEDGER_URL: ${NEO4J_LEDGER_URL}"
          echo "NEO4J_SEARCH_URL: ${NEO4J_SEARCH_URL}"

      - name: Update ECS Task Definition
        env:
          TF_OUTPUTS: ${{ steps.tf-outputs.outputs.tf_outputs }}
        run: |
          set -e
          echo "Starting Update ECS Task Definition step"
          
          TASK_DEF_NAME="credex-core-${ENVIRONMENT}"
          echo "Task Definition Name: $TASK_DEF_NAME"
          
          if ! TASK_DEF=$(aws ecs describe-task-definition --task-definition $TASK_DEF_NAME --query taskDefinition); then
            echo "Error describing task definition"
            exit 1
          fi
          
          NEW_TASK_DEF=$(echo $TASK_DEF | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy) | 
            .containerDefinitions[0].image = "'$ECR_REPO_URL':latest" | 
            .containerDefinitions[0].environment += [
              {"name": "NEO_4J_LEDGER_SPACE_BOLT_URL", "value": "'$TF_VAR_neo4j_ledger_space_bolt_url'"},
              {"name": "NEO_4J_SEARCH_SPACE_BOLT_URL", "value": "'$TF_VAR_neo4j_search_space_bolt_url'"},
              {"name": "NEO_4J_LEDGER_SPACE_USER", "value": "'${{ secrets.NEO4J_LEDGER_SPACE_USER }}'"},
              {"name": "NEO_4J_LEDGER_SPACE_PASS", "value": "'${{ secrets.NEO4J_LEDGER_SPACE_PASS }}'"},
              {"name": "NEO_4J_SEARCH_SPACE_USER", "value": "'${{ secrets.NEO4J_SEARCH_SPACE_USER }}'"},
              {"name": "NEO_4J_SEARCH_SPACE_PASS", "value": "'${{ secrets.NEO4J_SEARCH_SPACE_PASS }}'"},
              {"name": "JWT_SECRET", "value": "'${{ secrets.JWT_SECRET }}'"},
              {"name": "OPEN_EXCHANGE_RATES_API", "value": "'${{ secrets.OPEN_EXCHANGE_RATES_API }}'"}
            ]')
          
          echo "Writing new task definition to file"
          echo $NEW_TASK_DEF > new-task-def.json
          
          echo "Registering new task definition"
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://new-task-def.json --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "New task definition ARN: $NEW_TASK_DEF_ARN"
          echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Deploy Application
        env:
          TF_OUTPUTS: ${{ steps.tf-outputs.outputs.tf_outputs }}
        run: |
          echo "Deploying application to $ENVIRONMENT from branch ${{ github.ref_name }}"
          aws ecs update-service --cluster credex-cluster-$ENVIRONMENT --service credex-core-service-$ENVIRONMENT --task-definition $NEW_TASK_DEF_ARN

          # Wait for the service to stabilize
          aws ecs wait services-stable --cluster credex-cluster-$ENVIRONMENT --services credex-core-service-$ENVIRONMENT

          # Get the latest task ARN
          TASK_ARN=$(aws ecs list-tasks --cluster credex-cluster-$ENVIRONMENT --service-name credex-core-service-$ENVIRONMENT --query 'taskArns[0]' --output text)

          # Get the task details
          TASK_DETAILS=$(aws ecs describe-tasks --cluster credex-cluster-$ENVIRONMENT --tasks $TASK_ARN)

          # Print task details for debugging
          echo "Task Details:"
          echo "$TASK_DETAILS" | jq .

          # Get the latest events from the ECS service
          echo "ECS Service Events:"
          aws ecs describe-services --cluster credex-cluster-$ENVIRONMENT --services credex-core-service-$ENVIRONMENT --query 'services[0].events[0:5]' | jq .

      - name: Debug - Print Final Environment Variables
        run: |
          echo "Final Environment Variables:"
          env | grep -E "TF_VAR_|AWS_|NODE_ENV|GITHUB_ENV"

      - name: Save Neo4j Information as GitHub Secrets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract Neo4j information from Terraform outputs
          NEO4J_LEDGER_BOLT_URL=$(echo '${{ steps.tf-outputs.outputs.tf_outputs }}' | jq -r '.neo4j_ledger_space_bolt_url.value')
          NEO4J_SEARCH_BOLT_URL=$(echo '${{ steps.tf-outputs.outputs.tf_outputs }}' | jq -r '.neo4j_search_space_bolt_url.value')
          NEO4J_LEDGER_USER=$(echo '${{ steps.tf-outputs.outputs.tf_outputs }}' | jq -r '.neo4j_ledger_space_user.value')
          NEO4J_LEDGER_PASS=$(echo '${{ steps.tf-outputs.outputs.tf_outputs }}' | jq -r '.neo4j_ledger_space_pass.value')
          NEO4J_SEARCH_USER=$(echo '${{ steps.tf-outputs.outputs.tf_outputs }}' | jq -r '.neo4j_search_space_user.value')
          NEO4J_SEARCH_PASS=$(echo '${{ steps.tf-outputs.outputs.tf_outputs }}' | jq -r '.neo4j_search_space_pass.value')
          NEO4J_SSH_KEY=$(echo '${{ steps.tf-outputs.outputs.tf_outputs }}' | jq -r '.neo4j_ssh_key.value')

          # Save secrets using GitHub CLI
          gh secret set NEO4J_LEDGER_BOLT_URL --body "$NEO4J_LEDGER_BOLT_URL" --env $ENVIRONMENT
          gh secret set NEO4J_SEARCH_BOLT_URL --body "$NEO4J_SEARCH_BOLT_URL" --env $ENVIRONMENT
          gh secret set NEO4J_LEDGER_USER --body "$NEO4J_LEDGER_USER" --env $ENVIRONMENT
          gh secret set NEO4J_LEDGER_PASS --body "$NEO4J_LEDGER_PASS" --env $ENVIRONMENT
          gh secret set NEO4J_SEARCH_USER --body "$NEO4J_SEARCH_USER" --env $ENVIRONMENT
          gh secret set NEO4J_SEARCH_PASS --body "$NEO4J_SEARCH_PASS" --env $ENVIRONMENT
          gh secret set NEO4J_SSH_KEY --body "$NEO4J_SSH_KEY" --env $ENVIRONMENT

          echo "Neo4j information saved as GitHub secrets for the $ENVIRONMENT environment"
