name: Deploy Databases

on:
  workflow_dispatch:

jobs:
  deploy_neo4j:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/prod' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Environment
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/stage" ]]; then
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=development" >> $GITHUB_ENV
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check for existing Neo4j instances
        id: check_instances
        run: |
          INSTANCE_COUNT=$(aws ec2 describe-instances --filters "Name=tag:Project,Values=CredEx" "Name=tag:Environment,Values=${{ env.ENVIRONMENT }}" "Name=instance-state-name,Values=running" --query 'length(Reservations[*].Instances[*])' --output text)
          echo "INSTANCE_COUNT=$INSTANCE_COUNT" >> $GITHUB_ENV
          if [ "$INSTANCE_COUNT" -ge 2 ]; then
            echo "create_resource=false" >> $GITHUB_ENV
          else
            echo "create_resource=true" >> $GITHUB_ENV
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        id: plan
        env:
          TF_VAR_environment: ${{ env.ENVIRONMENT }}
          TF_VAR_create_resource: ${{ env.create_resource }}
          TF_VAR_create_ecr: "false"
          TF_VAR_create_ecs_cluster: "false"
          TF_VAR_create_log_group: "false"
        run: |
          cd terraform
          terraform workspace select ${{ env.ENVIRONMENT }} || terraform workspace new ${{ env.ENVIRONMENT }}
          terraform plan -detailed-exitcode -out=tfplan || echo "PLAN_EXIT_CODE=$?" >> $GITHUB_ENV
          
          if [ "${PLAN_EXIT_CODE:-0}" == "2" ]; then
            echo "Changes detected. Here's a summary of the changes:"
            terraform show -no-color tfplan | sed '1,/Terraform will perform the following actions/d' | sed '/Plan:/,$d'
          fi

      - name: Terraform Apply
        if: env.PLAN_EXIT_CODE == '2'
        env:
          TF_VAR_environment: ${{ env.ENVIRONMENT }}
          TF_VAR_create_resource: ${{ env.create_resource }}
          TF_VAR_create_ecr: "false"
          TF_VAR_create_ecs_cluster: "false"
          TF_VAR_create_log_group: "false"
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

      - name: No Changes Detected
        if: env.PLAN_EXIT_CODE == '0'
        run: |
          echo "No changes detected in the Terraform state. Exiting workflow."
          exit 0

      - name: Get Neo4j Information
        if: env.PLAN_EXIT_CODE == '2'
        run: |
          cd terraform
          echo "Terraform outputs:"
          terraform output || echo "No outputs found"
          
          NEO_4J_LEDGER_SPACE_BOLT_URL=$(terraform output -raw neo4j_ledger_space_bolt_url 2>/dev/null || echo "")
          NEO_4J_SEARCH_SPACE_BOLT_URL=$(terraform output -raw neo4j_search_space_bolt_url 2>/dev/null || echo "")
          NEO_4J_PRIVATE_KEY=$(terraform output -raw neo4j_private_key 2>/dev/null || echo "")
          NEO_4J_LEDGER_SPACE_USERNAME=$(terraform output -raw neo4j_ledger_space_username 2>/dev/null || echo "")
          NEO_4J_SEARCH_SPACE_USERNAME=$(terraform output -raw neo4j_search_space_username 2>/dev/null || echo "")
          NEO_4J_LEDGER_SPACE_PASSWORD=$(terraform output -raw neo4j_ledger_space_password 2>/dev/null || echo "")
          NEO_4J_SEARCH_SPACE_PASSWORD=$(terraform output -raw neo4j_search_space_password 2>/dev/null || echo "")
          
          echo "NEO_4J_LEDGER_SPACE_BOLT_URL=$NEO_4J_LEDGER_SPACE_BOLT_URL" >> $GITHUB_ENV
          echo "NEO_4J_SEARCH_SPACE_BOLT_URL=$NEO_4J_SEARCH_SPACE_BOLT_URL" >> $GITHUB_ENV
          echo "NEO_4J_PRIVATE_KEY=$NEO_4J_PRIVATE_KEY" >> $GITHUB_ENV
          echo "NEO_4J_LEDGER_SPACE_USERNAME=$NEO_4J_LEDGER_SPACE_USERNAME" >> $GITHUB_ENV
          echo "NEO_4J_SEARCH_SPACE_USERNAME=$NEO_4J_SEARCH_SPACE_USERNAME" >> $GITHUB_ENV
          echo "NEO_4J_LEDGER_SPACE_PASSWORD=$NEO_4J_LEDGER_SPACE_PASSWORD" >> $GITHUB_ENV
          echo "NEO_4J_SEARCH_SPACE_PASSWORD=$NEO_4J_SEARCH_SPACE_PASSWORD" >> $GITHUB_ENV

      - name: Print Neo4j Information
        if: env.PLAN_EXIT_CODE == '2'
        run: |
          echo "Changes applied. Updated Neo4j information for the ${{ env.ENVIRONMENT }} environment:"
          echo "NEO_4J_LEDGER_SPACE_BOLT_URL: $NEO_4J_LEDGER_SPACE_BOLT_URL"
          echo "NEO_4J_SEARCH_SPACE_BOLT_URL: $NEO_4J_SEARCH_SPACE_BOLT_URL"
          echo "NEO_4J_LEDGER_SPACE_USERNAME: $NEO_4J_LEDGER_SPACE_USERNAME"
          echo "NEO_4J_SEARCH_SPACE_USERNAME: $NEO_4J_SEARCH_SPACE_USERNAME"
          echo "NEO_4J_LEDGER_SPACE_PASSWORD: $NEO_4J_LEDGER_SPACE_PASSWORD"
          echo "NEO_4J_SEARCH_SPACE_PASSWORD: $NEO_4J_SEARCH_SPACE_PASSWORD"
          echo "NEO_4J_PRIVATE_KEY has been generated and saved to the environment variables."

      - name: Save Neo4j Information to GitHub Secrets
        if: env.PLAN_EXIT_CODE == '2'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh secret set NEO_4J_LEDGER_SPACE_BOLT_URL --body "$NEO_4J_LEDGER_SPACE_BOLT_URL" --env ${{ env.ENVIRONMENT }}
          gh secret set NEO_4J_SEARCH_SPACE_BOLT_URL --body "$NEO_4J_SEARCH_SPACE_BOLT_URL" --env ${{ env.ENVIRONMENT }}
          gh secret set NEO_4J_PRIVATE_KEY --body "$NEO_4J_PRIVATE_KEY" --env ${{ env.ENVIRONMENT }}
          gh secret set NEO_4J_LEDGER_SPACE_USERNAME --body "$NEO_4J_LEDGER_SPACE_USERNAME" --env ${{ env.ENVIRONMENT }}
          gh secret set NEO_4J_SEARCH_SPACE_USERNAME --body "$NEO_4J_SEARCH_SPACE_USERNAME" --env ${{ env.ENVIRONMENT }}
          gh secret set NEO_4J_LEDGER_SPACE_PASSWORD --body "$NEO_4J_LEDGER_SPACE_PASSWORD" --env ${{ env.ENVIRONMENT }}
          gh secret set NEO_4J_SEARCH_SPACE_PASSWORD --body "$NEO_4J_SEARCH_SPACE_PASSWORD" --env ${{ env.ENVIRONMENT }}
