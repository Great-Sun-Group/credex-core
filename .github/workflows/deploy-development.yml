name: Deploy to AWS Development

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "development"

env:
  ECS_CLUSTER: credex-cluster-development
  ECS_SERVICE: credex-core-service-development
  CONTAINER_NAME: credex-core
  TF_VAR_environment: development

jobs:
  deploy:
    name: Deploy to AWS Development
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: dev

      - name: Set up environment
        run: |
          echo "Setting up environment: development"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -var="environment=development" \
            -var="jwt_secret=${{ secrets.JWT_SECRET }}" \
            -var="whatsapp_bot_api_key=${{ secrets.WHATSAPP_BOT_API_KEY }}" \
            -var="open_exchange_rates_api=${{ secrets.OPEN_EXCHANGE_RATES_API }}" \
            -var="neo4j_ledger_space_user=${{ secrets.NEO_4J_LEDGER_SPACE_USER }}" \
            -var="neo4j_ledger_space_pass=${{ secrets.NEO_4J_LEDGER_SPACE_PASS }}" \
            -var="neo4j_search_space_user=${{ secrets.NEO_4J_SEARCH_SPACE_USER }}" \
            -var="neo4j_search_space_pass=${{ secrets.NEO_4J_SEARCH_SPACE_PASS }}" \
            -var="neo4j_enterprise_license=${{ secrets.NEO4J_ENTERPRISE_LICENSE }}" \
            -var="neo4j_public_key=${{ secrets.NEO4J_PUBLIC_KEY }}" \
            -out=tfplan
        working-directory: ./terraform

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform

      - name: Get ECR Repository URL
        id: get-ecr-url
        run: |
          ECR_REPO_URL=$(terraform output -raw ecr_repository_url)
          ECR_REPO_URL=$(echo $ECR_REPO_URL | tr -d '\n' | sed 's/::debug::.*$//')
          echo "ECR_REPO_URL=${ECR_REPO_URL}" >> $GITHUB_OUTPUT
        working-directory: ./terraform

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ steps.get-ecr-url.outputs.ECR_REPO_URL }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building and pushing to: $ECR_REPOSITORY"
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Run Post-Deployment Configuration
        run: |
          terraform apply -auto-approve -target=null_resource.post_deployment_config
        working-directory: ./terraform

      - name: Update ECS task definition
        id: task-def
        env:
          ECR_REPOSITORY: ${{ steps.get-ecr-url.outputs.ECR_REPO_URL }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          sed -i.bak \
            -e 's|${CONTAINER_IMAGE}|'${ECR_REPOSITORY}:${IMAGE_TAG}'|' \
            -e 's|${NODE_ENV}|development|' \
            -e 's|${LOG_LEVEL}|debug|' \
            -e 's|${AWS_REGION}|af-south-1|' \
            terraform/task-definition.json
          echo "task-definition=terraform/task-definition.json" >> $GITHUB_OUTPUT

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Check ECS Service Status
        run: |
          ./terraform/check_ecs_status.sh ${{ env.ECS_CLUSTER }} ${{ env.ECS_SERVICE }}

      - name: Run Neo4j Validation Tests
        env:
          NEO4J_HOST: ${{ steps.apply.outputs.neo4j_host }}
          NEO4J_USER: ${{ secrets.NEO_4J_LEDGER_SPACE_USER }}
          NEO4J_PASSWORD: ${{ secrets.NEO_4J_LEDGER_SPACE_PASS }}
        run: |
          chmod +x ./tests/neo4j_validation.sh
          ./tests/neo4j_validation.sh

      - name: Run Post-Deployment Tests
        env:
          API_URL: ${{ steps.apply.outputs.api_url }}
        run: |
          npm install axios jest
          node .github/workflows/post_deployment_tests.js

      - name: Log deployment
        if: success()
        run: |
          echo "Deployment to development triggered by ${{ github.actor }} at $(date)" >> deployment_log.txt
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add deployment_log.txt
          git commit -m "Log deployment to development"
          git push
        working-directory: ./terraform

      - name: Notify on Failure
        if: failure()
        run: |
          echo "Deployment failed. Please check the logs for more information."
          # Add notification mechanism here (e.g., send an email, Slack message, etc.)
