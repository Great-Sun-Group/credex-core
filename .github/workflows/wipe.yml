name: Wipe AWS Resources

on:
  workflow_dispatch:

jobs:
  wipe:
    name: Wipe AWS Resources
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/prod' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}
    env:
      TF_VAR_aws_region: af-south-1

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set environment
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/stage" ]]; then
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=development" >> $GITHUB_ENV
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TF_VAR_aws_region }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init and Workspace Selection
        run: |
          cd terraform
          terraform init
          terraform workspace select ${{ env.ENVIRONMENT }} || terraform workspace new ${{ env.ENVIRONMENT }}

      - name: Delete SSM Parameters
        run: |
          aws ssm get-parameters-by-path --path "/credex/${{ env.ENVIRONMENT }}/" --recursive --query "Parameters[].Name" --output text | tr '\t' '\n' | while read param; do
            aws ssm delete-parameter --name "$param" || true
            echo "Deleted SSM parameter: $param"
          done

      - name: Terraform Destroy
        run: |
          cd terraform
          terraform destroy -auto-approve -var="create_resources=false"

      - name: Cleanup Orphaned Resources
        run: |
          # Function to get all AWS resources in the environment
          get_aws_resources() {
            local resource_type=$1
            aws $resource_type describe-${resource_type}s --query "${resource_type}s[*].${resource_type}Id" --output text
          }

          # Function to remove a resource
          remove_resource() {
            local resource_type=$1
            local resource_id=$2
            aws $resource_type delete-${resource_type} --${resource_type}-id $resource_id
            echo "Removed $resource_type: $resource_id"
          }

          # Cleanup process for each resource type
          cleanup() {
            local resource_type=$1
            echo "Cleaning up $resource_type resources..."
            resources=$(get_aws_resources $resource_type)
            
            if [ -z "$resources" ]; then
              echo "No $resource_type resources found."
            else
              echo "The following $resource_type resources were found:"
              echo "$resources"
              
              for resource in $resources; do
                remove_resource $resource_type $resource
              done
            fi
          }

          # Run cleanup for different resource types
          cleanup "instance"
          cleanup "security-group"
          cleanup "vpc"
          cleanup "subnet"
          cleanup "load-balancer"
          cleanup "ecs-cluster"
          cleanup "ecs-service"

      - name: Wipe Terraform State
        run: |
          cd terraform
          # Remove local state
          rm -f terraform.tfstate*
          # Remove remote state if using backend (adjust as needed)
          terraform state list | xargs -I {} terraform state rm {}
          # If using S3 backend, you might want to delete the state file from S3
          # aws s3 rm s3://your-bucket-name/path/to/terraform.tfstate

      - name: Verify Wipe
        run: |
          cd terraform
          if terraform show; then
            echo "Error: Resources still exist after wipe"
            exit 1
          else
            echo "All resources have been successfully removed"
          fi

      - name: Log Wipe
        if: success()
        run: |
          echo "Wipe of ${{ env.ENVIRONMENT }} environment completed successfully at $(date)"

      - name: Notify on Failure
        if: failure()
        run: |
          echo "Wipe of ${{ env.ENVIRONMENT }} environment failed. Please check the logs for more information."
