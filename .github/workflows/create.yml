name: Initial Deployment to AWS

on:
  workflow_dispatch:

jobs:
  deploy:
    name: Initial AWS Deployment
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/prod' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}
    env:
      TF_VAR_domain_base: mycredex.app
      TF_VAR_subdomain_development: dev.api
      TF_VAR_subdomain_staging: stage.api
      TF_VAR_subdomain_production: api
      TF_VAR_neo4j_instance_count_development: 2
      TF_VAR_neo4j_instance_count_staging: 2
      TF_VAR_neo4j_instance_count_production: 2
      TF_VAR_neo4j_instance_type_development: t3.xlarge
      TF_VAR_neo4j_instance_type_staging: r5.2xlarge
      TF_VAR_neo4j_instance_type_production: r5.12xlarge
      TF_VAR_log_level_development: debug
      TF_VAR_log_level_staging: info
      TF_VAR_log_level_production: info
      TF_VAR_operation_type: create

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Environment
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/stage" ]]; then
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=development" >> $GITHUB_ENV
          fi
          echo "NODE_ENV=$ENVIRONMENT" >> $GITHUB_ENV
          echo "TF_VAR_environment=$ENVIRONMENT" >> $GITHUB_ENV
          echo "Setting environment to: $ENVIRONMENT"
          
          # Debug output for environment variables
          echo "Debug: Environment Variables"
          echo "ENVIRONMENT: $ENVIRONMENT"
          echo "NODE_ENV: $NODE_ENV"
          echo "TF_VAR_environment: $TF_VAR_environment"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -out=tfplan

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        id: tf-outputs
        run: |
          cd terraform
          echo "Retrieving Terraform outputs..."
          terraform output -json > tf_outputs.json
          
          # Validate JSON
          if jq empty tf_outputs.json 2>/dev/null; then
            echo "Valid JSON output"
            cat tf_outputs.json
          else
            echo "Invalid JSON output. Raw content:"
            cat tf_outputs.json
            exit 1
          fi

      - name: Parse Terraform Outputs
        id: parse-outputs
        run: |
          cd terraform
          if [ ! -f tf_outputs.json ]; then
            echo "tf_outputs.json file not found"
            exit 1
          fi
          
          echo "Parsing Terraform outputs..."
          ECR_REPO_URL=$(jq -r '.ecr_repository_url.value // empty' tf_outputs.json)
          ECS_CLUSTER_ARN=$(jq -r '.ecs_cluster_arn.value // empty' tf_outputs.json)
          ECS_TASK_DEF_ARN=$(jq -r '.ecs_task_definition_arn.value // empty' tf_outputs.json)
          NEO4J_LEDGER_URL=$(jq -r '.neo4j_ledger_space_bolt_url.value // empty' tf_outputs.json)
          NEO4J_SEARCH_URL=$(jq -r '.neo4j_search_space_bolt_url.value // empty' tf_outputs.json)

          # Check if any of the values are empty
          if [ -z "$ECR_REPO_URL" ] || [ -z "$ECS_CLUSTER_ARN" ] || [ -z "$ECS_TASK_DEF_ARN" ] || [ -z "$NEO4J_LEDGER_URL" ] || [ -z "$NEO4J_SEARCH_URL" ]; then
            echo "One or more Terraform outputs are empty"
            exit 1
          fi

          echo "ECR_REPO_URL=${ECR_REPO_URL}" >> $GITHUB_ENV
          echo "ECS_CLUSTER_ARN=${ECS_CLUSTER_ARN}" >> $GITHUB_ENV
          echo "ECS_TASK_DEF_ARN=${ECS_TASK_DEF_ARN}" >> $GITHUB_ENV
          echo "TF_VAR_neo4j_ledger_space_bolt_url=${NEO4J_LEDGER_URL}" >> $GITHUB_ENV
          echo "TF_VAR_neo4j_search_space_bolt_url=${NEO4J_SEARCH_URL}" >> $GITHUB_ENV

          echo "Parsed Terraform Outputs:"
          echo "ECR_REPO_URL: ${ECR_REPO_URL}"
          echo "ECS_CLUSTER_ARN: ${ECS_CLUSTER_ARN}"
          echo "ECS_TASK_DEF_ARN: ${ECS_TASK_DEF_ARN}"
          echo "NEO4J_LEDGER_URL: ${NEO4J_LEDGER_URL}"
          echo "NEO4J_SEARCH_URL: ${NEO4J_SEARCH_URL}"

      - name: Update ECS Task Definition
        env:
          TF_OUTPUTS: ${{ steps.tf-outputs.outputs.tf_outputs }}
        run: |
          set -e
          echo "Starting Update ECS Task Definition step"
          
          echo "Environment variables:"
          env | grep -E "TF_VAR_|AWS_|NODE_ENV|GITHUB_ENV|ECR_REPO_URL|ECS_"
          
          echo "Describing ECS task definition"
          TASK_DEF_NAME="credex-core-${ENVIRONMENT}"
          echo "Task Definition Name: $TASK_DEF_NAME"
          
          echo "AWS Configuration:"
          aws configure list
          
          echo "Listing available task definitions:"
          aws ecs list-task-definitions
          
          echo "Attempting to describe task definition"
          if ! TASK_DEF=$(aws ecs describe-task-definition --task-definition $TASK_DEF_NAME --query taskDefinition); then
            echo "Error describing task definition. AWS CLI output:"
            aws ecs describe-task-definition --task-definition $TASK_DEF_NAME
            echo "Available task definitions:"
            aws ecs list-task-definitions
            exit 1
          fi
          echo "Task Definition retrieved successfully"
          echo "Task Definition contents:"
          echo "$TASK_DEF" | jq .
          
          echo "Updating task definition"
          NEW_TASK_DEF=$(echo $TASK_DEF | jq --arg ECR_REPO_URL "$ECR_REPO_URL" '.containerDefinitions[0].image = $ECR_REPO_URL + ":latest" | .containerDefinitions[0].environment += [
            {"name": "NEO_4J_LEDGER_SPACE_BOLT_URL", "value": "'"$TF_VAR_neo4j_ledger_space_bolt_url"'"},
            {"name": "NEO_4J_SEARCH_SPACE_BOLT_URL", "value": "'"$TF_VAR_neo4j_search_space_bolt_url"'"},
            {"name": "NEO_4J_LEDGER_SPACE_USER", "value": "'"${{ secrets.NEO4J_LEDGER_SPACE_USER }}"'"},
            {"name": "NEO_4J_LEDGER_SPACE_PASS", "value": "'"${{ secrets.NEO4J_LEDGER_SPACE_PASS }}"'"},
            {"name": "NEO_4J_SEARCH_SPACE_USER", "value": "'"${{ secrets.NEO4J_SEARCH_SPACE_USER }}"'"},
            {"name": "NEO_4J_SEARCH_SPACE_PASS", "value": "'"${{ secrets.NEO4J_SEARCH_SPACE_PASS }}"'"},
            {"name": "JWT_SECRET", "value": "'"${{ secrets.JWT_SECRET }}"'"},
            {"name": "OPEN_EXCHANGE_RATES_API", "value": "'"${{ secrets.OPEN_EXCHANGE_RATES_API }}"'"}
          ]')
          echo "Task definition updated"
          
          echo "Writing new task definition to file"
          echo $NEW_TASK_DEF > new-task-def.json
          
          echo "Registering new task definition"
          if ! aws ecs register-task-definition --cli-input-json file://new-task-def.json; then
            echo "Error registering new task definition. Contents of new-task-def.json:"
            cat new-task-def.json
            exit 1
          fi
          echo "New task definition registered successfully"

      - name: Deploy Application
        env:
          TF_OUTPUTS: ${{ steps.tf-outputs.outputs.tf_outputs }}
        run: |
          echo "Deploying application to $TF_VAR_environment from branch ${{ github.ref_name }}"
          aws ecs update-service --cluster credex-cluster-$TF_VAR_environment --service credex-core-service-$TF_VAR_environment --task-definition credex-core-$TF_VAR_environment

          # Wait for the service to stabilize
          aws ecs wait services-stable --cluster credex-cluster-$TF_VAR_environment --services credex-core-service-$TF_VAR_environment

          # Get the latest task ARN
          TASK_ARN=$(aws ecs list-tasks --cluster credex-cluster-$TF_VAR_environment --service-name credex-core-service-$TF_VAR_environment --query 'taskArns[0]' --output text)

          # Get the task details
          TASK_DETAILS=$(aws ecs describe-tasks --cluster credex-cluster-$TF_VAR_environment --tasks $TASK_ARN)

          # Print task details for debugging
          echo "Task Details:"
          echo "$TASK_DETAILS" | jq .

          # Get the latest events from the ECS service
          echo "ECS Service Events:"
          aws ecs describe-services --cluster credex-cluster-$TF_VAR_environment --services credex-core-service-$TF_VAR_environment --query 'services[0].events[0:5]' | jq .

      - name: Debug - Print Final Environment Variables
        run: |
          echo "Final Environment Variables:"
          env | grep -E "TF_VAR_|AWS_|NODE_ENV|GITHUB_ENV"

      - name: Save Neo4j Information as GitHub Secrets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract Neo4j information from Terraform outputs
          NEO4J_LEDGER_BOLT_URL=$(echo '${{ steps.tf-outputs.outputs.tf_outputs }}' | jq -r '.neo4j_ledger_space_bolt_url.value')
          NEO4J_SEARCH_BOLT_URL=$(echo '${{ steps.tf-outputs.outputs.tf_outputs }}' | jq -r '.neo4j_search_space_bolt_url.value')
          NEO4J_LEDGER_USER=$(echo '${{ steps.tf-outputs.outputs.tf_outputs }}' | jq -r '.neo4j_ledger_space_user.value')
          NEO4J_LEDGER_PASS=$(echo '${{ steps.tf-outputs.outputs.tf_outputs }}' | jq -r '.neo4j_ledger_space_pass.value')
          NEO4J_SEARCH_USER=$(echo '${{ steps.tf-outputs.outputs.tf_outputs }}' | jq -r '.neo4j_search_space_user.value')
          NEO4J_SEARCH_PASS=$(echo '${{ steps.tf-outputs.outputs.tf_outputs }}' | jq -r '.neo4j_search_space_pass.value')
          NEO4J_SSH_KEY=$(echo '${{ steps.tf-outputs.outputs.tf_outputs }}' | jq -r '.neo4j_ssh_key.value')

          # Save secrets using GitHub CLI
          gh secret set NEO4J_LEDGER_BOLT_URL --body "$NEO4J_LEDGER_BOLT_URL" --env $ENVIRONMENT
          gh secret set NEO4J_SEARCH_BOLT_URL --body "$NEO4J_SEARCH_BOLT_URL" --env $ENVIRONMENT
          gh secret set NEO4J_LEDGER_USER --body "$NEO4J_LEDGER_USER" --env $ENVIRONMENT
          gh secret set NEO4J_LEDGER_PASS --body "$NEO4J_LEDGER_PASS" --env $ENVIRONMENT
          gh secret set NEO4J_SEARCH_USER --body "$NEO4J_SEARCH_USER" --env $ENVIRONMENT
          gh secret set NEO4J_SEARCH_PASS --body "$NEO4J_SEARCH_PASS" --env $ENVIRONMENT
          gh secret set NEO4J_SSH_KEY --body "$NEO4J_SSH_KEY" --env $ENVIRONMENT

          echo "Neo4j information saved as GitHub secrets for the $ENVIRONMENT environment"
