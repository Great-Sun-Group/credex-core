name: Initial Deployment to AWS

on:
  workflow_dispatch:

jobs:
  deploy:
    name: Initial AWS Deployment
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/prod' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}
    env:
      TF_VAR_domain_base: mycredex.app
      TF_VAR_subdomain_development: dev.api
      TF_VAR_subdomain_staging: stage.api
      TF_VAR_subdomain_production: api
      TF_VAR_neo4j_instance_count_development: 2
      TF_VAR_neo4j_instance_count_staging: 2
      TF_VAR_neo4j_instance_count_production: 2
      TF_VAR_neo4j_instance_type_development: t3.xlarge
      TF_VAR_neo4j_instance_type_staging: r5.2xlarge
      TF_VAR_neo4j_instance_type_production: r5.12xlarge
      TF_VAR_log_level_development: debug
      TF_VAR_log_level_staging: info
      TF_VAR_log_level_production: info
      TF_VAR_operation_type: create

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Environment
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/stage" ]]; then
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=development" >> $GITHUB_ENV
          fi
          echo "NODE_ENV=$ENVIRONMENT" >> $GITHUB_ENV
          echo "TF_VAR_environment=$ENVIRONMENT" >> $GITHUB_ENV
          echo "Setting environment to: $ENVIRONMENT"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Debug - Print Environment Variables
        run: |
          echo "NODE_ENV: $NODE_ENV"
          echo "TF_VAR_environment: $TF_VAR_environment"
          echo "GitHub Environment: $ENVIRONMENT"
          echo "AWS_REGION: ${{ secrets.AWS_REGION }}"
          echo "OPEN_EXCHANGE_RATES_API is set: ${{ secrets.OPEN_EXCHANGE_RATES_API != '' }}"
          echo "NEO4J_ENTERPRISE_LICENSE is set: ${{ secrets.NEO4J_ENTERPRISE_LICENSE != '' }}"

      - name: Check Required Secrets
        run: |
          missing_secrets=()

          if [ -z "${{ secrets.AWS_ACCESS_KEY }}" ]; then
            missing_secrets+=("AWS_ACCESS_KEY")
          fi
          if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            missing_secrets+=("AWS_SECRET_ACCESS_KEY")
          fi
          if [ -z "${{ secrets.AWS_REGION }}" ]; then
            missing_secrets+=("AWS_REGION")
          fi
          if [ -z "${{ secrets.OPEN_EXCHANGE_RATES_API }}" ]; then
            missing_secrets+=("OPEN_EXCHANGE_RATES_API")
          fi
          if [ -z "${{ secrets.NEO4J_ENTERPRISE_LICENSE }}" ]; then
            missing_secrets+=("NEO4J_ENTERPRISE_LICENSE")
          fi

          if [ ${#missing_secrets[@]} -ne 0 ]; then
            echo "Error: The following required secrets are missing: ${missing_secrets[*]}"
            echo "Please set these secrets in your GitHub repository settings."
            exit 1
          fi

      - name: Debug - Check AWS Configuration
        run: |
          echo "Checking AWS credentials..."
          if aws sts get-caller-identity &> /dev/null; then
            echo "AWS credentials are valid"
            aws sts get-caller-identity
          else
            echo "Error: AWS credentials are invalid or not set correctly"
            echo "AWS_ACCESS_KEY is set: ${{ secrets.AWS_ACCESS_KEY != '' }}"
            echo "AWS_SECRET_ACCESS_KEY is set: ${{ secrets.AWS_SECRET_ACCESS_KEY != '' }}"
            echo "AWS_REGION is set: ${{ secrets.AWS_REGION != '' }}"
            exit 1
          fi
          aws configure list

      - name: Create Terraform Variables File
        run: |
          cat << EOF > terraform/terraform.tfvars
          environment = "$ENVIRONMENT"
          operation_type = "create"
          jwt_secret = "${{ secrets.JWT_SECRET }}"
          open_exchange_rates_api = "${{ secrets.OPEN_EXCHANGE_RATES_API }}"
          neo4j_enterprise_license = "${{ secrets.NEO4J_ENTERPRISE_LICENSE }}"
          neo4j_ledger_space_user = "${{ secrets.NEO4J_LEDGER_SPACE_USER }}"
          neo4j_ledger_space_pass = "${{ secrets.NEO4J_LEDGER_SPACE_PASS }}"
          neo4j_search_space_user = "${{ secrets.NEO4J_SEARCH_SPACE_USER }}"
          neo4j_search_space_pass = "${{ secrets.NEO4J_SEARCH_SPACE_PASS }}"
          neo4j_public_key = "${{ secrets.NEO4J_PUBLIC_KEY }}"
          EOF

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init and Workspace Selection
        run: |
          cd terraform
          terraform init
          terraform workspace select $TF_VAR_environment || terraform workspace new $TF_VAR_environment

      - name: Import Existing Resources
        run: |
          cd terraform
          
          # Function to import a resource if it exists
          import_if_exists() {
            local resource_type=$1
            local resource_name=$2
            local tf_resource=$3
            
            if aws $resource_type describe-$resource_name --name $resource_name 2>/dev/null; then
              terraform import $tf_resource $resource_name
              echo "Imported existing $resource_type: $resource_name"
            else
              echo "No existing $resource_type found: $resource_name"
            fi
          }
          
          # Import existing resources
          import_if_exists acm get-certificate "mycredex.app" "aws_acm_certificate.credex_cert"
          import_if_exists ec2 security-groups "credex-alb-sg-$TF_VAR_environment" "aws_security_group.alb_sg"
          import_if_exists ec2 security-groups "credex-core-ecs-tasks-sg-$TF_VAR_environment" "aws_security_group.ecs_tasks_sg"
          import_if_exists ec2 security-groups "credex-neo4j-sg-$TF_VAR_environment" "aws_security_group.neo4j_sg"
          import_if_exists ecs clusters "credex-cluster-$TF_VAR_environment" "aws_ecs_cluster.credex_cluster"
          import_if_exists ecs services "credex-core-service-$TF_VAR_environment" "aws_ecs_service.credex_core_service"
          import_if_exists elbv2 load-balancers "credex-alb-$TF_VAR_environment" "aws_lb.credex_alb"

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform
          terraform plan -out=tfplan -var-file=terraform.tfvars

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        id: tf-outputs
        run: |
          cd terraform
          echo "Retrieving Terraform outputs..."
          terraform output -json > tf_outputs.json
          echo "tf_outputs=$(cat tf_outputs.json | jq -c .)" >> $GITHUB_OUTPUT

      - name: Set Neo4j Bolt URLs
        run: |
          NEO4J_LEDGER_IP=$(echo '${{ steps.tf-outputs.outputs.tf_outputs }}' | jq -r '.neo4j_ledger_space_bolt_url.value' | sed 's|bolt://||' | sed 's|:7687||')
          NEO4J_SEARCH_IP=$(echo '${{ steps.tf-outputs.outputs.tf_outputs }}' | jq -r '.neo4j_search_space_bolt_url.value' | sed 's|bolt://||' | sed 's|:7687||')
          echo "TF_VAR_neo4j_ledger_space_bolt_url=bolt://${NEO4J_LEDGER_IP}:7687" >> $GITHUB_ENV
          echo "TF_VAR_neo4j_search_space_bolt_url=bolt://${NEO4J_SEARCH_IP}:7687" >> $GITHUB_ENV

      - name: Update ECS Task Definition
        env:
          TF_OUTPUTS: ${{ steps.tf-outputs.outputs.tf_outputs }}
        run: |
          TASK_DEF=$(aws ecs describe-task-definition --task-definition credex-core-$TF_VAR_environment --query taskDefinition)
          NEW_TASK_DEF=$(echo $TASK_DEF | jq '.containerDefinitions[0].environment += [
            {"name": "NEO_4J_LEDGER_SPACE_BOLT_URL", "value": "${{ env.TF_VAR_neo4j_ledger_space_bolt_url }}"},
            {"name": "NEO_4J_SEARCH_SPACE_BOLT_URL", "value": "${{ env.TF_VAR_neo4j_search_space_bolt_url }}"},
            {"name": "NEO_4J_LEDGER_SPACE_USER", "value": "${{ vars.NEO4J_LEDGER_SPACE_USER }}"},
            {"name": "NEO_4J_LEDGER_SPACE_PASS", "value": "${{ vars.NEO4J_LEDGER_SPACE_PASS }}"},
            {"name": "NEO_4J_SEARCH_SPACE_USER", "value": "${{ vars.NEO4J_SEARCH_SPACE_USER }}"},
            {"name": "NEO_4J_SEARCH_SPACE_PASS", "value": "${{ vars.NEO4J_SEARCH_SPACE_PASS }}"},
            {"name": "JWT_SECRET", "value": "${{ vars.JWT_SECRET }}"},
            {"name": "OPEN_EXCHANGE_RATES_API", "value": "${{ vars.OPEN_EXCHANGE_RATES_API }}"}
          ]')
          echo $NEW_TASK_DEF > new-task-def.json
          aws ecs register-task-definition --cli-input-json file://new-task-def.json

      - name: Deploy Application
        env:
          TF_OUTPUTS: ${{ steps.tf-outputs.outputs.tf_outputs }}
        run: |
          echo "Deploying application to $TF_VAR_environment from branch ${{ github.ref_name }}"
          aws ecs update-service --cluster credex-cluster-$TF_VAR_environment --service credex-core-service-$TF_VAR_environment --task-definition credex-core-$TF_VAR_environment

          # Wait for the service to stabilize
          aws ecs wait services-stable --cluster credex-cluster-$TF_VAR_environment --services credex-core-service-$TF_VAR_environment

          # Get the latest task ARN
          TASK_ARN=$(aws ecs list-tasks --cluster credex-cluster-$TF_VAR_environment --service-name credex-core-service-$TF_VAR_environment --query 'taskArns[0]' --output text)

          # Get the task details
          TASK_DETAILS=$(aws ecs describe-tasks --cluster credex-cluster-$TF_VAR_environment --tasks $TASK_ARN)

          # Print task details for debugging
          echo "Task Details:"
          echo "$TASK_DETAILS" | jq .

          # Get the latest events from the ECS service
          echo "ECS Service Events:"
          aws ecs describe-services --cluster credex-cluster-$TF_VAR_environment --services credex-core-service-$TF_VAR_environment --query 'services[0].events[0:5]' | jq .

      - name: Debug - Print Final Environment Variables
        run: |
          echo "Final Environment Variables:"
          env | grep -E "TF_VAR_|AWS_|NODE_ENV|GITHUB_ENV"
