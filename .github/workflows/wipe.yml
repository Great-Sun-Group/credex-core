name: Wipe AWS Resources

on:
  workflow_dispatch:

jobs:
  wipe:
    name: Wipe AWS Resources
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/prod' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}
    env:
      TF_VAR_domain_base: mycredex.app
      TF_VAR_subdomain_development: dev.api
      TF_VAR_subdomain_staging: stage.api
      TF_VAR_subdomain_production: api
      TF_VAR_operation_type: delete

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set environment
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/stage" ]]; then
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=development" >> $GITHUB_ENV
          fi
          echo "TF_VAR_environment=$ENVIRONMENT" >> $GITHUB_ENV
          echo "Setting environment to: $ENVIRONMENT"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check IAM Permissions
        run: |
          echo "Checking IAM permissions..."
          if aws iam list-roles --max-items 1 &> /dev/null; then
            echo "IAM permissions check passed. Basic role listing is allowed."
          else
            echo "Warning: Unable to list IAM roles. Some operations may fail."
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Create Terraform Variables File
        run: |
          cat << EOF > terraform/terraform.tfvars
          environment = "$ENVIRONMENT"
          operation_type = "delete"
          EOF

      - name: Terraform Init and Workspace Selection
        run: |
          cd terraform
          terraform init
          terraform workspace select $ENVIRONMENT || terraform workspace new $ENVIRONMENT

      - name: Terraform Destroy
        run: |
          cd terraform
          terraform destroy -auto-approve -var-file=terraform.tfvars || echo "Terraform destroy failed, continuing with manual resource deletion"

      - name: Wipe Orphaned Resources
        run: |
          # Function to retry AWS CLI commands
          retry_command() {
            local max_attempts=3
            local attempt=1
            until "$@"; do
              if (( attempt == max_attempts )); then
                echo "Command failed after $max_attempts attempts: $*" >&2
                return 1
              fi
              echo "Command failed, retrying in 5 seconds..." >&2
              sleep 5
              ((attempt++))
            done
            return 0
          }

          # Function to wipe ECS resources
          wipe_ecs_resources() {
            echo "Wiping ECS resources..."
            clusters=$(aws ecs list-clusters --query "clusterArns[]" --output text)
            for cluster in $clusters; do
              services=$(aws ecs list-services --cluster $cluster --query "serviceArns[]" --output text)
              for service in $services; do
                retry_command aws ecs update-service --cluster $cluster --service $service --desired-count 0
                retry_command aws ecs delete-service --cluster $cluster --service $service --force
                echo "Deleted ECS service: $service in cluster: $cluster"
              done
              retry_command aws ecs delete-cluster --cluster $cluster
              echo "Deleted ECS cluster: $cluster"
            done
          }

          # Function to wipe EC2 instances
          wipe_ec2_instances() {
            echo "Wiping EC2 instances..."
            instances=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].InstanceId" --output text)
            for instance in $instances; do
              retry_command aws ec2 terminate-instances --instance-ids $instance
              echo "Terminated EC2 instance: $instance"
            done
          }

          # Function to wipe load balancers
          wipe_load_balancers() {
            echo "Wiping load balancers..."
            lbs=$(aws elbv2 describe-load-balancers --query "LoadBalancers[*].LoadBalancerArn" --output text)
            for lb in $lbs; do
              retry_command aws elbv2 delete-load-balancer --load-balancer-arn $lb
              echo "Deleted load balancer: $lb"
            done
          }

          # Function to wipe security groups
          wipe_security_groups() {
            echo "Wiping security groups..."
            sgs=$(aws ec2 describe-security-groups --query "SecurityGroups[?GroupName!='default'].GroupId" --output text)
            for sg in $sgs; do
              # Detach the security group from any network interfaces
              nis=$(aws ec2 describe-network-interfaces --filters Name=group-id,Values=$sg --query 'NetworkInterfaces[*].NetworkInterfaceId' --output text)
              for ni in $nis; do
                retry_command aws ec2 modify-network-interface-attribute --network-interface-id $ni --groups $(aws ec2 describe-security-groups --filters Name=group-name,Values=default --query 'SecurityGroups[0].GroupId' --output text)
                echo "Detached security group $sg from network interface $ni"
              done
              
              # Remove all ingress and egress rules
              retry_command aws ec2 revoke-security-group-ingress --group-id $sg --protocol all --port all --cidr 0.0.0.0/0
              retry_command aws ec2 revoke-security-group-egress --group-id $sg --protocol all --port all --cidr 0.0.0.0/0
              
              # Now attempt to delete the security group
              retry_command aws ec2 delete-security-group --group-id $sg
              echo "Deleted security group: $sg"
            done
          }

          # Function to wipe ACM certificates
          wipe_acm_certificates() {
            echo "Wiping ACM certificates..."
            certificates=$(aws acm list-certificates --query "CertificateSummaryList[*].CertificateArn" --output text)
            for cert in $certificates; do
              retry_command aws acm delete-certificate --certificate-arn $cert
              echo "Deleted ACM certificate: $cert"
            done
          }

          # Function to wipe VPCs
          wipe_vpcs() {
            echo "Wiping VPCs..."
            vpcs=$(aws ec2 describe-vpcs --query "Vpcs[?IsDefault==\`false\`].VpcId" --output text)
            for vpc in $vpcs; do
              retry_command aws ec2 delete-vpc --vpc-id $vpc
              echo "Deleted VPC: $vpc"
            done
          }

          # Function to wipe IAM roles
          wipe_iam_roles() {
            echo "Wiping IAM roles..."
            roles=("ecs-execution-role-$ENVIRONMENT" "ecs-task-role-$ENVIRONMENT")
            for role in "${roles[@]}"; do
              if aws iam get-role --role-name $role &>/dev/null; then
                # Detach all managed policies from the role
                attached_policies=$(aws iam list-attached-role-policies --role-name $role --query 'AttachedPolicies[*].PolicyArn' --output text)
                for policy in $attached_policies; do
                  retry_command aws iam detach-role-policy --role-name $role --policy-arn $policy
                  echo "Detached managed policy $policy from role $role"
                done

                # Delete all inline policies
                inline_policies=$(aws iam list-role-policies --role-name $role --query 'PolicyNames' --output text)
                for policy in $inline_policies; do
                  retry_command aws iam delete-role-policy --role-name $role --policy-name $policy
                  echo "Deleted inline policy $policy from role $role"
                done

                # Delete the role
                retry_command aws iam delete-role --role-name $role
                echo "Deleted IAM role: $role"
              else
                echo "IAM role $role not found, skipping deletion"
              fi
            done
          }

          # Function to wipe CloudWatch log groups
          wipe_cloudwatch_log_groups() {
            echo "Wiping CloudWatch log groups..."
            log_group="/ecs/credex-core-$ENVIRONMENT"
            if aws logs describe-log-groups --log-group-name-prefix $log_group | grep -q $log_group; then
              retry_command aws logs delete-log-group --log-group-name $log_group
              echo "Deleted CloudWatch log group: $log_group"
            else
              echo "CloudWatch log group $log_group not found, skipping deletion"
            fi
          }

          # Function to wipe EC2 key pairs
          wipe_ec2_key_pairs() {
            echo "Wiping EC2 key pairs..."
            key_pair="neo4j-key-pair-$ENVIRONMENT"
            if aws ec2 describe-key-pairs --key-names $key_pair &>/dev/null; then
              retry_command aws ec2 delete-key-pair --key-name $key_pair
              echo "Deleted EC2 key pair: $key_pair"
            else
              echo "EC2 key pair $key_pair not found, skipping deletion"
            fi
          }

          # Run wipe functions in order
          wipe_ecs_resources
          wipe_ec2_instances
          wipe_load_balancers
          wipe_security_groups
          wipe_acm_certificates
          wipe_vpcs
          wipe_iam_roles
          wipe_cloudwatch_log_groups
          wipe_ec2_key_pairs

          echo "Manual resource deletion completed"

      - name: Clear Terraform State
        run: |
          cd terraform
          # Remove local state
          rm -rf terraform.tfstate*
          rm -rf .terraform
          rm -rf terraform.tfstate.d
          
          # If using S3 backend, remove state from S3
          if grep -q "backend \"s3\"" *.tf; then
            BUCKET_NAME=$(grep -A 3 "backend \"s3\"" *.tf | grep "bucket" | cut -d '"' -f 2)
            KEY_NAME=$(grep -A 3 "backend \"s3\"" *.tf | grep "key" | cut -d '"' -f 2)
            aws s3 rm s3://$BUCKET_NAME/$KEY_NAME
            echo "Removed Terraform state from S3 bucket: $BUCKET_NAME, key: $KEY_NAME"
          fi
          
          echo "Terraform state cleared"

      - name: Verify Wipe
        run: |
          cd terraform
          terraform init -input=false
          if terraform show -json 2>/dev/null | jq -e '.values.root_module.resources' >/dev/null 2>&1; then
            echo "Error: Resources still exist after wipe"
            terraform show
            exit 1
          else
            echo "All resources have been successfully wiped"
          fi

      - name: Log Wipe
        if: success()
        run: |
          echo "Wipe of $ENVIRONMENT environment completed successfully at $(date)"

      - name: Notify on Failure
        if: failure()
        run: |
          echo "Wipe of $ENVIRONMENT environment failed. Please check the logs for more information."
