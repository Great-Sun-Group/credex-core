name: Wipe AWS Resources

on:
  workflow_dispatch:
    inputs:
      confirm_wipe:
        description: 'Type "YES" to confirm wiping all AWS resources'
        required: true

jobs:
  wipe-aws-resources:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_wipe == 'YES'
    environment: ${{ github.ref == 'refs/heads/prod' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set Environment
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
        elif [[ "${{ github.ref }}" == "refs/heads/stage" ]]; then
          echo "ENVIRONMENT=staging" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=development" >> $GITHUB_ENV
        fi

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Wipe EC2 Resources
      run: |
        echo "Terminating EC2 instances..."
        instance_ids=$(aws ec2 describe-instances --filters Name=instance-state-name,Values=pending,running,stopping,stopped --query 'Reservations[*].Instances[*].[InstanceId]' --output text)
        if [ -n "$instance_ids" ]; then
          aws ec2 terminate-instances --instance-ids $instance_ids
          echo "Waiting for instances to terminate..."
          aws ec2 wait instance-terminated --instance-ids $instance_ids
        else
          echo "No running instances to terminate."
        fi

        echo "Deleting EC2 security groups..."
        sg_ids=$(aws ec2 describe-security-groups --query 'SecurityGroups[?GroupName!=`default`].[GroupId]' --output text)
        for sg_id in $sg_ids; do
          if ! aws ec2 delete-security-group --group-id $sg_id 2>/dev/null; then
            echo "Failed to delete security group $sg_id. It may have dependencies."
          fi
        done

        echo "Deleting EC2 key pairs..."
        key_pairs=$(aws ec2 describe-key-pairs --query 'KeyPairs[*].[KeyName]' --output text)
        for key in $key_pairs; do
          aws ec2 delete-key-pair --key-name $key
        done

    - name: Wipe VPC Resources
      run: |
        echo "Deleting VPC resources..."
        vpc_ids=$(aws ec2 describe-vpcs --query 'Vpcs[?IsDefault==`false`].[VpcId]' --output text)
        for id in $vpc_ids; do
          aws ec2 delete-vpc --vpc-id $id
        done

    - name: Wipe S3 Buckets
      run: |
        echo "Deleting S3 buckets..."
        buckets=$(aws s3 ls | awk '{print $3}')
        for bucket in $buckets; do
          aws s3 rb s3://$bucket --force
        done

    - name: Wipe RDS Instances
      run: |
        echo "Deleting RDS instances..."
        rds_instances=$(aws rds describe-db-instances --query 'DBInstances[*].[DBInstanceIdentifier]' --output text)
        for instance in $rds_instances; do
          aws rds delete-db-instance --db-instance-identifier $instance --skip-final-snapshot
        done

    - name: Wipe ECS Clusters
      run: |
        echo "Deleting ECS clusters..."
        clusters=$(aws ecs list-clusters --query 'clusterArns[]' --output text)
        for cluster in $clusters; do
          aws ecs delete-cluster --cluster $cluster
        done

    - name: Wipe ECR Repositories
      run: |
        echo "Deleting ECR repositories..."
        repos=$(aws ecr describe-repositories --query 'repositories[*].[repositoryName]' --output text)
        for repo in $repos; do
          aws ecr delete-repository --repository-name $repo --force
        done

    - name: Final Message
      run: |
        echo "AWS resource wipe completed."
        echo "All resources created by these workflows should now be deleted, except for any security groups with dependencies."
        echo "If you encounter any issues or find remaining resources, please investigate and delete them manually."
        echo "You can now use your Terraform configurations to rebuild the infrastructure from scratch if needed."
