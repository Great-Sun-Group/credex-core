name: Deploy and Manage Connectors

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Action to perform (deploy/import/update)"
        required: true
        default: "deploy"
      resource:
        description: "Resource to manage (all/log_group/iam_roles) - only for import/update"
        required: false
        default: "all"

jobs:
  deploy_infrastructure:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/prod' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}

    env:
      ENVIRONMENT: ${{ github.ref == 'refs/heads/prod' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: |
          cd terraform
          echo "Initializing Terraform..."
          terraform init

      - name: Check Existing Resources
        if: github.event.inputs.action != 'import'
        run: |
          LOG_GROUP=$(aws logs describe-log-groups --log-group-name-prefix "/ecs/credex-core-${{ env.ENVIRONMENT }}" --query 'logGroups[0].logGroupName' --output text)
          EXEC_ROLE=$(aws iam get-role --role-name ecs-execution-role-${{ env.ENVIRONMENT }} --query 'Role.RoleName' --output text || echo "")
          TASK_ROLE=$(aws iam get-role --role-name ecs-task-role-${{ env.ENVIRONMENT }} --query 'Role.RoleName' --output text || echo "")

          echo "TF_VAR_create_log_group=${{ $LOG_GROUP == 'None' }}" >> $GITHUB_ENV
          echo "TF_VAR_create_iam_roles=${{ $EXEC_ROLE == '' && $TASK_ROLE == '' }}" >> $GITHUB_ENV

      - name: Import Resources
        if: github.event.inputs.action == 'import'
        run: |
          cd terraform
          if [[ "${{ github.event.inputs.resource }}" == "all" || "${{ github.event.inputs.resource }}" == "log_group" ]]; then
            terraform import module.app.aws_cloudwatch_log_group.ecs_logs[0] /ecs/credex-core-${{ env.ENVIRONMENT }}
          fi
          if [[ "${{ github.event.inputs.resource }}" == "all" || "${{ github.event.inputs.resource }}" == "iam_roles" ]]; then
            terraform import module.app.aws_iam_role.ecs_execution_role[0] ecs-execution-role-${{ env.ENVIRONMENT }}
            terraform import module.app.aws_iam_role.ecs_task_role[0] ecs-task-role-${{ env.ENVIRONMENT }}
          fi

      - name: Terraform Plan
        env:
          TF_VAR_environment: ${{ env.ENVIRONMENT }}
          TF_VAR_create_ecr: "true"
          TF_VAR_create_ecs_cluster: "true"
          TF_VAR_create_log_group: ${{ env.TF_VAR_create_log_group }}
          TF_VAR_create_key_pair: "true"
          TF_VAR_create_iam_roles: ${{ env.TF_VAR_create_iam_roles }}
          TF_VAR_create_load_balancer: "true"
          TF_VAR_create_target_group: "true"
          TF_VAR_create_security_groups: "true"
          TF_VAR_create_neo4j_instances: "true"
        run: |
          cd terraform
          echo "Planning Terraform changes..."
          terraform plan -input=false -out=tfplan

      - name: Terraform Apply
        if: github.event.inputs.action != 'import'
        env:
          TF_VAR_environment: ${{ env.ENVIRONMENT }}
          TF_VAR_create_ecr: "true"
          TF_VAR_create_ecs_cluster: "true"
          TF_VAR_create_log_group: ${{ env.TF_VAR_create_log_group }}
          TF_VAR_create_key_pair: "true"
          TF_VAR_create_iam_roles: ${{ env.TF_VAR_create_iam_roles }}
          TF_VAR_create_load_balancer: "true"
          TF_VAR_create_target_group: "true"
          TF_VAR_create_security_groups: "true"
          TF_VAR_create_neo4j_instances: "true"
        run: |
          cd terraform
          echo "Applying Terraform changes..."
          terraform apply -auto-approve -input=false tfplan

          echo "Terraform apply completed successfully"

      - name: Get Infrastructure Outputs
        run: |
          cd terraform
          echo "Retrieving infrastructure outputs..."
          terraform output || { echo "Failed to retrieve Terraform outputs"; exit 1; }
          echo "VPC_ID=$(terraform output -raw vpc_id)" >> $GITHUB_ENV || true
          echo "SUBNET_IDS=$(terraform output -raw subnet_ids)" >> $GITHUB_ENV || true
          echo "NEO4J_SECURITY_GROUP_ID=$(terraform output -raw neo4j_security_group_id)" >> $GITHUB_ENV || true
          echo "KEY_PAIR_NAME=$(terraform output -raw key_pair_name)" >> $GITHUB_ENV || true
          echo "ALB_SECURITY_GROUP_ID=$(terraform output -raw alb_security_group_id)" >> $GITHUB_ENV || true
