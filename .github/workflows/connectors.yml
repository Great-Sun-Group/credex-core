name: Deploy and Manage Connectors

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Action to perform"
        required: true
        type: choice
        options:
          - create
          - update
      components:
        description: "Components to manage"
        required: true
        type: multi-select
        options:
          - vpc
          - subnets
          - igw
          - nat
          - routes
          - sg
          - ecr
          - ecs
          - logs
          - iam
          - alb
          - keypair
          - neo4j_sg
          - acm

jobs:
  deploy_infrastructure:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/prod' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}

    env:
      ENVIRONMENT: ${{ github.ref == 'refs/heads/prod' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: |
          cd terraform
          echo "Initializing Terraform..."
          terraform init

      - name: Set Terraform Variables
        run: |
          echo "TF_VAR_create_vpc=${{ contains(github.event.inputs.components, 'vpc') }}" >> $GITHUB_ENV
          echo "TF_VAR_create_subnets=${{ contains(github.event.inputs.components, 'subnets') }}" >> $GITHUB_ENV
          echo "TF_VAR_create_igw=${{ contains(github.event.inputs.components, 'igw') }}" >> $GITHUB_ENV
          echo "TF_VAR_create_nat=${{ contains(github.event.inputs.components, 'nat') }}" >> $GITHUB_ENV
          echo "TF_VAR_create_routes=${{ contains(github.event.inputs.components, 'routes') }}" >> $GITHUB_ENV
          echo "TF_VAR_create_sg=${{ contains(github.event.inputs.components, 'sg') }}" >> $GITHUB_ENV
          echo "TF_VAR_create_ecr=${{ contains(github.event.inputs.components, 'ecr') }}" >> $GITHUB_ENV
          echo "TF_VAR_create_ecs=${{ contains(github.event.inputs.components, 'ecs') }}" >> $GITHUB_ENV
          echo "TF_VAR_create_logs=${{ contains(github.event.inputs.components, 'logs') }}" >> $GITHUB_ENV
          echo "TF_VAR_create_iam=${{ contains(github.event.inputs.components, 'iam') }}" >> $GITHUB_ENV
          echo "TF_VAR_create_load_balancer=${{ contains(github.event.inputs.components, 'alb') }}" >> $GITHUB_ENV
          echo "TF_VAR_create_target_group=${{ contains(github.event.inputs.components, 'alb') }}" >> $GITHUB_ENV
          echo "TF_VAR_create_key_pair=${{ contains(github.event.inputs.components, 'keypair') }}" >> $GITHUB_ENV
          echo "TF_VAR_create_neo4j_security_group=${{ contains(github.event.inputs.components, 'neo4j_sg') }}" >> $GITHUB_ENV
          echo "TF_VAR_create_acm=${{ contains(github.event.inputs.components, 'acm') }}" >> $GITHUB_ENV
          echo "TF_VAR_create_security_groups=${{ contains(github.event.inputs.components, 'sg') }}" >> $GITHUB_ENV
          echo "TF_VAR_create_ecs_cluster=${{ contains(github.event.inputs.components, 'ecs') }}" >> $GITHUB_ENV
          echo "TF_VAR_create_log_group=${{ contains(github.event.inputs.components, 'logs') }}" >> $GITHUB_ENV
          echo "TF_VAR_create_iam_roles=${{ contains(github.event.inputs.components, 'iam') }}" >> $GITHUB_ENV

      - name: Terraform Plan
        env:
          TF_VAR_environment: ${{ env.ENVIRONMENT }}
        run: |
          cd terraform
          echo "Planning Terraform changes..."
          terraform plan -input=false -out=tfplan

      - name: Terraform Apply
        env:
          TF_VAR_environment: ${{ env.ENVIRONMENT }}
        run: |
          cd terraform
          echo "Applying Terraform changes..."
          terraform apply -auto-approve -input=false tfplan

          echo "Terraform apply completed successfully"

      - name: Print Infrastructure Outputs
        run: |
          cd terraform
          echo "Retrieving infrastructure outputs..."
          echo "========================================"
          echo "Infrastructure Outputs:"
          echo "========================================"
          terraform output
          echo "========================================"
          echo "Key Outputs:"
          echo "VPC ID: $(terraform output -raw vpc_id)"
          echo "Subnet IDs: $(terraform output -raw subnet_ids)"
          echo "Neo4j Security Group ID: $(terraform output -raw neo4j_security_group_id)"
          echo "Key Pair Name: $(terraform output -raw key_pair_name)"
          echo "ALB Security Group ID: $(terraform output -raw alb_security_group_id)"
          echo "========================================"
