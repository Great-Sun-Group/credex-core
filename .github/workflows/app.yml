name: Deploy Application

on:
  workflow_dispatch:

jobs:
  deploy_application:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/prod' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}

    env:
      ENVIRONMENT: ${{ github.ref == 'refs/heads/prod' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}
      BUILD_TARGET: ${{ github.ref == 'refs/heads/prod' && 'production' || github.ref == 'refs/heads/stage' && 'production' || 'development' }}
      DOMAIN: ${{ github.ref == 'refs/heads/prod' && 'mycredex.app' || github.ref == 'refs/heads/stage' && 'stage.mycredex.dev' || 'dev.mycredex.dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: |
          cd terraform
          echo "Current environment: ${ENVIRONMENT}"
          terraform init \
            -backend-config="bucket=credex-terraform-state-${ENVIRONMENT}" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=af-south-1" \
            -backend-config="dynamodb_table=credex-terraform-state-lock-${ENVIRONMENT}"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: credex-core-${{ env.ENVIRONMENT }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building Docker image with target $BUILD_TARGET..."
          docker build --no-cache --target $BUILD_TARGET \
            --build-arg NODE_ENV=${{ env.ENVIRONMENT }} \
            --build-arg NEO_4J_LEDGER_SPACE_USER="${{ secrets.NEO_4J_LEDGER_SPACE_USER }}" \
            --build-arg NEO_4J_LEDGER_SPACE_PASS="${{ secrets.NEO_4J_LEDGER_SPACE_PASS }}" \
            --build-arg NEO_4J_LEDGER_SPACE_BOLT_URL="${{ secrets.NEO_4J_LEDGER_SPACE_BOLT_URL }}" \
            --build-arg NEO_4J_SEARCH_SPACE_USER="${{ secrets.NEO_4J_SEARCH_SPACE_USER }}" \
            --build-arg NEO_4J_SEARCH_SPACE_PASS="${{ secrets.NEO_4J_SEARCH_SPACE_PASS }}" \
            --build-arg NEO_4J_SEARCH_SPACE_BOLT_URL="${{ secrets.NEO_4J_SEARCH_SPACE_BOLT_URL }}" \
            --build-arg OPEN_EXCHANGE_RATES_API="${{ secrets.OPEN_EXCHANGE_RATES_API }}" \
            --build-arg JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            --build-arg CLIENT_API_KEY="${{ secrets.CLIENT_API_KEY }}" \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Docker image built successfully."

          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "Image pushed successfully: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

          echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Terraform Plan
        env:
          TF_VAR_environment: ${{ env.ENVIRONMENT }}
          TF_VAR_docker_image: ${{ env.IMAGE }}
          # Dummy values for Neo4j variables since we're only targeting app module
          TF_VAR_neo_4j_ledger_space_bolt_url: "dummy"
          TF_VAR_neo_4j_search_space_bolt_url: "dummy"
          TF_VAR_neo_4j_ledger_space_user: "dummy"
          TF_VAR_neo_4j_search_space_user: "dummy"
          TF_VAR_neo_4j_ledger_space_password: "dummy"
          TF_VAR_neo_4j_search_space_password: "dummy"
          TF_VAR_neo4j_enterprise_license: "dummy"
        run: |
          cd terraform
          echo "Current environment: ${ENVIRONMENT}"
          echo "Planning Terraform changes..."
          terraform plan -input=false -out=tfplan -target=module.app

      - name: Terraform Apply
        env:
          TF_VAR_environment: ${{ env.ENVIRONMENT }}
          TF_VAR_docker_image: ${{ env.IMAGE }}
          # Dummy values for Neo4j variables since we're only targeting app module
          TF_VAR_neo_4j_ledger_space_bolt_url: "dummy"
          TF_VAR_neo_4j_search_space_bolt_url: "dummy"
          TF_VAR_neo_4j_ledger_space_user: "dummy"
          TF_VAR_neo_4j_search_space_user: "dummy"
          TF_VAR_neo_4j_ledger_space_password: "dummy"
          TF_VAR_neo_4j_search_space_password: "dummy"
          TF_VAR_neo4j_enterprise_license: "dummy"
        run: |
          cd terraform
          echo "Current environment: ${ENVIRONMENT}"
          echo "Applying Terraform changes..."
          terraform apply -auto-approve -input=false tfplan

      - name: Deploy Application
        run: |
          echo "Deploying application to $ENVIRONMENT from branch ${{ github.ref_name }}"

          echo "Fetching current task definition..."
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition credex-core-$ENVIRONMENT --query 'taskDefinition' --output json)
          echo "Current task definition fetched."

          echo "Updating task definition with new image and environment variables..."
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$IMAGE" --arg NODE_ENV "$ENVIRONMENT" '.containerDefinitions[0].image = $IMAGE | .containerDefinitions[0].environment += [
            {"name": "NODE_ENV", "value": $NODE_ENV},
            {"name": "NEO_4J_LEDGER_SPACE_USER", "value": "${{ secrets.NEO_4J_LEDGER_SPACE_USER }}"},
            {"name": "NEO_4J_LEDGER_SPACE_PASS", "value": "${{ secrets.NEO_4J_LEDGER_SPACE_PASS }}"},
            {"name": "NEO_4J_LEDGER_SPACE_BOLT_URL", "value": "${{ secrets.NEO_4J_LEDGER_SPACE_BOLT_URL }}"},
            {"name": "NEO_4J_SEARCH_SPACE_USER", "value": "${{ secrets.NEO_4J_SEARCH_SPACE_USER }}"},
            {"name": "NEO_4J_SEARCH_SPACE_PASS", "value": "${{ secrets.NEO_4J_SEARCH_SPACE_PASS }}"},
            {"name": "NEO_4J_SEARCH_SPACE_BOLT_URL", "value": "${{ secrets.NEO_4J_SEARCH_SPACE_BOLT_URL }}"},
            {"name": "JWT_SECRET", "value": "${{ secrets.JWT_SECRET }}"},
            {"name": "CLIENT_API_KEY", "value": "${{ secrets.CLIENT_API_KEY }}"},
            {"name": "OPEN_EXCHANGE_RATES_API", "value": "${{ secrets.OPEN_EXCHANGE_RATES_API }}"}
          ]' | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
          echo "Task definition updated."

          echo "Registering new task definition..."
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION" --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "New task definition registered: $NEW_TASK_DEF_ARN"

          echo "Updating ECS service with new task definition..."
          aws ecs update-service --cluster credex-cluster-$ENVIRONMENT --service credex-core-service-$ENVIRONMENT --task-definition $NEW_TASK_DEF_ARN --force-new-deployment

          echo "Waiting for service to stabilize..."
          aws ecs wait services-stable --cluster credex-cluster-$ENVIRONMENT --services credex-core-service-$ENVIRONMENT --max-wait-time 600

          echo "Deployment completed. Checking service status..."
          aws ecs describe-services --cluster credex-cluster-$ENVIRONMENT --services credex-core-service-$ENVIRONMENT \
            --query 'services[0].{status: status, runningCount: runningCount, desiredCount: desiredCount, events: events[0].message}'

      - name: Print Deployment Information
        run: |
          echo "Deployment completed successfully. Updated ECS service with latest image and task definition."
          echo "Environment: $ENVIRONMENT"
          echo "Image: $IMAGE"
          echo "Build Target: $BUILD_TARGET"
          
          cd terraform
          echo "========================================"
          echo "App Infrastructure Outputs:"
          echo "========================================"
          echo "ECS Cluster ARN: $(terraform output -raw ecs_cluster_arn)"
          echo "ECS Task Definition ARN: $(terraform output -raw ecs_task_definition_arn)"
          echo "ECS Service Name: $(terraform output -raw ecs_service_name)"
          echo "ECS Service ID: $(terraform output -raw ecs_service_id)"
          echo "========================================"

  deploy_docs:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/prod' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}
    needs: deploy_application

    env:
      ENVIRONMENT: ${{ github.ref == 'refs/heads/prod' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}
      DOMAIN: ${{ github.ref == 'refs/heads/prod' && 'mycredex.app' || github.ref == 'refs/heads/stage' && 'stage.mycredex.dev' || 'dev.mycredex.dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1

      - name: Deploy to S3
        run: |
          aws s3 sync docs/ s3://docs.${DOMAIN} \
            --delete

      - name: Print Deployment Information
        run: |
          echo "Documentation deployment completed successfully."
          echo "Environment: $ENVIRONMENT"
          echo "Bucket: docs.${DOMAIN}"
          echo "URL: https://docs.${DOMAIN}"
