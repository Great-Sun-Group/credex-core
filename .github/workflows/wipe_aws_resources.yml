name: Wipe AWS Resources

on:
  workflow_dispatch:
    inputs:
      confirm_wipe:
        description: '"YES" deletes all resources in the AWS env for this branch'
        required: true

jobs:
  wipe-aws-resources:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_wipe == 'YES'
    environment: ${{ github.ref == 'refs/heads/prod' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Environment
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/stage" ]]; then
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=development" >> $GITHUB_ENV
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1

      - name: Check AWS Permissions
        run: |
          echo "Checking AWS permissions..."
          aws sts get-caller-identity
          aws ec2 describe-vpcs --output json

      - name: Wipe EC2 Resources
        run: |
          echo "Terminating EC2 instances..."
          instance_ids=$(aws ec2 describe-instances --filters Name=instance-state-name,Values=pending,running,stopping,stopped --query 'Reservations[*].Instances[*].[InstanceId]' --output text)
          if [ -n "$instance_ids" ]; then
            aws ec2 terminate-instances --instance-ids $instance_ids
            echo "Waiting for instances to terminate..."
            aws ec2 wait instance-terminated --instance-ids $instance_ids
          else
            echo "No running instances to terminate."
          fi

          echo "Deleting EC2 key pairs..."
          key_pairs=$(aws ec2 describe-key-pairs --query 'KeyPairs[*].[KeyName]' --output text)
          for key in $key_pairs; do
            aws ec2 delete-key-pair --key-name $key
          done

      - name: Wipe VPC Resources
        run: |
          echo "Deleting VPC resources..."
          vpc_ids=$(aws ec2 describe-vpcs --query 'Vpcs[?IsDefault==`false`].[VpcId]' --output text)
          for vpc_id in $vpc_ids; do
            echo "Processing VPC: $vpc_id"
            
            # Delete NAT Gateways
            echo "Deleting NAT Gateways..."
            nat_gateway_ids=$(aws ec2 describe-nat-gateways --filter Name=vpc-id,Values=$vpc_id --query 'NatGateways[*].[NatGatewayId]' --output text)
            for nat_gw_id in $nat_gateway_ids; do
              echo "Deleting NAT Gateway: $nat_gw_id"
              aws ec2 delete-nat-gateway --nat-gateway-id $nat_gw_id
            done
            
            # Wait for NAT Gateways to be deleted
            for nat_gw_id in $nat_gateway_ids; do
              echo "Waiting for NAT Gateway $nat_gw_id to be deleted..."
              aws ec2 wait nat-gateway-deleted --nat-gateway-ids $nat_gw_id
            done

            # Handle Elastic IP addresses
            echo "Handling Elastic IP addresses..."
            eips=$(aws ec2 describe-addresses --filters "Name=domain,Values=vpc" --query 'Addresses[*].[AllocationId,AssociationId]' --output text)
            while IFS=$'\t' read -r allocation_id association_id; do
              if [ -n "$association_id" ] && [ "$association_id" != "None" ]; then
                echo "Disassociating Elastic IP $allocation_id"
                aws ec2 disassociate-address --association-id "$association_id" || echo "Failed to disassociate Elastic IP $allocation_id"
              fi
              echo "Releasing Elastic IP $allocation_id"
              aws ec2 release-address --allocation-id "$allocation_id" || echo "Failed to release Elastic IP $allocation_id"
            done <<< "$eips"

            # Detach and delete Internet Gateways
            echo "Detaching and deleting Internet Gateways..."
            igw_ids=$(aws ec2 describe-internet-gateways --filters Name=attachment.vpc-id,Values=$vpc_id --query 'InternetGateways[*].[InternetGatewayId]' --output text)
            for igw_id in $igw_ids; do
              aws ec2 detach-internet-gateway --internet-gateway-id $igw_id --vpc-id $vpc_id || echo "Failed to detach Internet Gateway $igw_id"
              aws ec2 delete-internet-gateway --internet-gateway-id $igw_id || echo "Failed to delete Internet Gateway $igw_id"
            done

            # Delete Subnets
            echo "Deleting Subnets..."
            subnet_ids=$(aws ec2 describe-subnets --filters Name=vpc-id,Values=$vpc_id --query 'Subnets[*].[SubnetId]' --output text)
            for subnet_id in $subnet_ids; do
              aws ec2 delete-subnet --subnet-id $subnet_id || echo "Failed to delete Subnet $subnet_id"
            done

            # Delete Route Tables
            echo "Deleting Route Tables..."
            rt_ids=$(aws ec2 describe-route-tables --filters Name=vpc-id,Values=$vpc_id --query 'RouteTables[?Associations[0].Main!=`true`].[RouteTableId]' --output text)
            for rt_id in $rt_ids; do
              aws ec2 delete-route-table --route-table-id $rt_id || echo "Failed to delete Route Table $rt_id"
            done

            # Delete Network ACLs
            echo "Deleting Network ACLs..."
            nacl_ids=$(aws ec2 describe-network-acls --filters Name=vpc-id,Values=$vpc_id --query 'NetworkAcls[?!IsDefault].[NetworkAclId]' --output text)
            for nacl_id in $nacl_ids; do
              aws ec2 delete-network-acl --network-acl-id $nacl_id || echo "Failed to delete Network ACL $nacl_id"
            done

            # Delete Security Groups (except the default one)
            echo "Deleting Security Groups..."
            sg_ids=$(aws ec2 describe-security-groups --filters Name=vpc-id,Values=$vpc_id --query 'SecurityGroups[?GroupName!=`default`].[GroupId]' --output text)
            for sg_id in $sg_ids; do
              # Remove all ingress and egress rules before deleting
              aws ec2 revoke-security-group-ingress --group-id $sg_id --protocol all --source-group $sg_id || echo "Failed to revoke ingress rules for $sg_id"
              aws ec2 revoke-security-group-egress --group-id $sg_id --protocol all --source-group $sg_id || echo "Failed to revoke egress rules for $sg_id"
              aws ec2 delete-security-group --group-id $sg_id || echo "Failed to delete Security Group $sg_id"
            done

            # Delete Network Interfaces
            echo "Deleting Network Interfaces..."
            eni_ids=$(aws ec2 describe-network-interfaces --filters Name=vpc-id,Values=$vpc_id --query 'NetworkInterfaces[*].[NetworkInterfaceId]' --output text)
            for eni_id in $eni_ids; do
              aws ec2 delete-network-interface --network-interface-id $eni_id || echo "Failed to delete Network Interface $eni_id"
            done

            # Finally, delete the VPC
            echo "Deleting VPC..."
            aws ec2 delete-vpc --vpc-id $vpc_id || echo "Failed to delete VPC $vpc_id"
          done

      - name: Wipe S3 Buckets
        run: |
          echo "Deleting S3 buckets..."
          buckets=$(aws s3 ls | awk '{print $3}')
          for bucket in $buckets; do
            echo "Processing bucket: $bucket"
            aws s3 rm s3://$bucket --recursive
            aws s3api delete-bucket --bucket $bucket || echo "Failed to delete bucket $bucket"
          done

      - name: Wipe ECS Clusters
        run: |
          echo "Deleting ECS clusters, services, and tasks..."
          clusters=$(aws ecs list-clusters --query 'clusterArns[]' --output text)
          for cluster in $clusters; do
            echo "Processing cluster: $cluster"
            
            services=$(aws ecs list-services --cluster $cluster --query 'serviceArns[]' --output text)
            for service in $services; do
              aws ecs update-service --cluster $cluster --service $service --desired-count 0
              aws ecs delete-service --cluster $cluster --service $service --force || echo "Failed to delete service $service in cluster $cluster"
            done
            
            tasks=$(aws ecs list-tasks --cluster $cluster --query 'taskArns[]' --output text)
            for task in $tasks; do
              aws ecs stop-task --cluster $cluster --task $task || echo "Failed to stop task $task in cluster $cluster"
            done
            
            aws ecs delete-cluster --cluster $cluster || echo "Failed to delete cluster $cluster"
          done

      - name: Wipe ECR Repositories
        run: |
          echo "Deleting ECR repositories..."
          repos=$(aws ecr describe-repositories --query 'repositories[*].[repositoryName]' --output text)
          for repo in $repos; do
            aws ecr delete-repository --repository-name $repo --force || echo "Failed to delete ECR repository $repo"
          done

      - name: Wipe CloudWatch Log Groups
        run: |
          echo "Deleting CloudWatch Log Groups..."
          log_groups=$(aws logs describe-log-groups --query 'logGroups[*].[logGroupName]' --output text)
          for log_group in $log_groups; do
            aws logs delete-log-group --log-group-name $log_group || echo "Failed to delete Log Group $log_group"
          done

      - name: Wipe Load Balancers and Target Groups
        run: |
          echo "Deleting Application Load Balancers..."
          albs=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[*].[LoadBalancerArn]' --output text)
          for alb in $albs; do
            aws elbv2 delete-load-balancer --load-balancer-arn $alb || echo "Failed to delete Load Balancer $alb"
          done

          echo "Deleting Target Groups..."
          target_groups=$(aws elbv2 describe-target-groups --query 'TargetGroups[*].[TargetGroupArn]' --output text)
          for tg in $target_groups; do
            aws elbv2 delete-target-group --target-group-arn $tg || echo "Failed to delete Target Group $tg"
          done

      - name: Wipe ACM Certificates
        run: |
          echo "Deleting ACM Certificates..."
          certificates=$(aws acm list-certificates --query 'CertificateSummaryList[*].[CertificateArn]' --output text)
          for cert in $certificates; do
            aws acm delete-certificate --certificate-arn $cert || echo "Failed to delete ACM Certificate $cert"
          done

      - name: Wipe IAM Roles
        run: |
          echo "Deleting IAM Roles created by the current user..."
          roles=$(aws iam list-roles --query 'Roles[?starts_with(RoleName, `ecs-`) == `true`].[RoleName]' --output text)
          for role in $roles; do
            # Detach policies
            policies=$(aws iam list-attached-role-policies --role-name $role --query 'AttachedPolicies[*].[PolicyArn]' --output text)
            for policy in $policies; do
              aws iam detach-role-policy --role-name $role --policy-arn $policy
            done
            # Remove role from instance profiles
            profiles=$(aws iam list-instance-profiles-for-role --role-name $role --query 'InstanceProfiles[*].[InstanceProfileName]' --output text)
            for profile in $profiles; do
              aws iam remove-role-from-instance-profile --instance-profile-name $profile --role-name $role
            done
            # Delete the role
            aws iam delete-role --role-name $role || echo "Failed to delete IAM Role $role"
          done

      - name: Final Message
        run: |
          echo "AWS resource wipe attempt completed for the current environment."
          echo "Please review the logs for any resources that failed to delete."
          echo "You may need to manually delete some resources or investigate permission issues."
          echo "Note: Route 53 resources are not affected by this workflow, as they are managed separately."
          echo "After ensuring all environment-specific resources are properly deleted, you can use your Terraform configurations to rebuild the infrastructure if needed."
