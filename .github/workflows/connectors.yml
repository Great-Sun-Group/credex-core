name: Deploy and Manage Connectors

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Action to perform"
        required: true
        type: choice
        options:
          - create
          - update
      components_to_manage:
        description: "Components to manage"
        required: false
        type: string
      vpc:
        description: "Manage VPC"
        required: false
        type: boolean
      subnets:
        description: "Manage Subnets"
        required: false
        type: boolean
      igw:
        description: "Manage Internet Gateway"
        required: false
        type: boolean
      nat:
        description: "Manage NAT Gateway"
        required: false
        type: boolean
      routes:
        description: "Manage Routes"
        required: false
        type: boolean
      sg:
        description: "Manage Security Groups"
        required: false
        type: boolean
      ecr:
        description: "Manage ECR"
        required: false
        type: boolean
      ecs:
        description: "Manage ECS"
        required: false
        type: boolean
      logs:
        description: "Manage Logs"
        required: false
        type: boolean
      iam:
        description: "Manage IAM"
        required: false
        type: boolean
      alb:
        description: "Manage ALB"
        required: false
        type: boolean
      keypair:
        description: "Manage Key Pair"
        required: false
        type: boolean
      neo4j_sg:
        description: "Manage Neo4j Security Group"
        required: false
        type: boolean
      acm:
        description: "Manage ACM"
        required: false
        type: boolean

jobs:
  deploy_infrastructure:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/prod' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}

    env:
      ENVIRONMENT: ${{ github.ref == 'refs/heads/prod' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: |
          cd terraform
          echo "Initializing Terraform..."
          terraform init

      - name: Set Terraform Variables
        run: |
          echo "TF_VAR_create_vpc=${{ github.event.inputs.vpc }}" >> $GITHUB_ENV
          echo "TF_VAR_create_subnets=${{ github.event.inputs.subnets }}" >> $GITHUB_ENV
          echo "TF_VAR_create_igw=${{ github.event.inputs.igw }}" >> $GITHUB_ENV
          echo "TF_VAR_create_nat=${{ github.event.inputs.nat }}" >> $GITHUB_ENV
          echo "TF_VAR_create_routes=${{ github.event.inputs.routes }}" >> $GITHUB_ENV
          echo "TF_VAR_create_sg=${{ github.event.inputs.sg }}" >> $GITHUB_ENV
          echo "TF_VAR_create_ecr=${{ github.event.inputs.ecr }}" >> $GITHUB_ENV
          echo "TF_VAR_create_ecs=${{ github.event.inputs.ecs }}" >> $GITHUB_ENV
          echo "TF_VAR_create_logs=${{ github.event.inputs.logs }}" >> $GITHUB_ENV
          echo "TF_VAR_create_iam=${{ github.event.inputs.iam }}" >> $GITHUB_ENV
          echo "TF_VAR_create_load_balancer=${{ github.event.inputs.alb }}" >> $GITHUB_ENV
          echo "TF_VAR_create_target_group=${{ github.event.inputs.alb }}" >> $GITHUB_ENV
          echo "TF_VAR_create_key_pair=${{ github.event.inputs.keypair }}" >> $GITHUB_ENV
          echo "TF_VAR_create_neo4j_security_group=${{ github.event.inputs.neo4j_sg }}" >> $GITHUB_ENV
          echo "TF_VAR_create_acm=${{ github.event.inputs.acm }}" >> $GITHUB_ENV
          echo "TF_VAR_create_security_groups=${{ github.event.inputs.sg }}" >> $GITHUB_ENV
          echo "TF_VAR_create_ecs_cluster=${{ github.event.inputs.ecs }}" >> $GITHUB_ENV
          echo "TF_VAR_create_log_group=${{ github.event.inputs.logs }}" >> $GITHUB_ENV
          echo "TF_VAR_create_iam_roles=${{ github.event.inputs.iam }}" >> $GITHUB_ENV

      - name: Terraform Plan
        env:
          TF_VAR_environment: ${{ env.ENVIRONMENT }}
        run: |
          cd terraform
          echo "Planning Terraform changes..."
          terraform plan -input=false -out=tfplan

      - name: Terraform Apply
        env:
          TF_VAR_environment: ${{ env.ENVIRONMENT }}
        run: |
          cd terraform
          echo "Applying Terraform changes..."
          terraform apply -auto-approve -input=false tfplan

          echo "Terraform apply completed successfully"

      - name: Print Infrastructure Outputs
        run: |
          cd terraform
          echo "Retrieving infrastructure outputs..."
          echo "========================================"
          echo "Infrastructure Outputs:"
          echo "========================================"
          terraform output
          echo "========================================"
          echo "Key Outputs:"
          echo "VPC ID: $(terraform output -raw vpc_id)"
          echo "Subnet IDs: $(terraform output -raw subnet_ids)"
          echo "Neo4j Security Group ID: $(terraform output -raw neo4j_security_group_id)"
          echo "Key Pair Name: $(terraform output -raw key_pair_name)"
          echo "ALB Security Group ID: $(terraform output -raw alb_security_group_id)"
          echo "========================================"
