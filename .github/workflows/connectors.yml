name: Deploy Connectors

on:
  workflow_dispatch:

jobs:
  deploy_infrastructure:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/prod' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}

    env:
      ENVIRONMENT: ${{ github.ref == 'refs/heads/prod' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Create S3 bucket and DynamoDB table if not exist
        run: |
          echo "Current environment: ${ENVIRONMENT}"
          BUCKET_NAME="credex-terraform-state-${ENVIRONMENT}"
          TABLE_NAME="credex-terraform-state-lock-${ENVIRONMENT}"

          # Check if S3 bucket exists, create if it doesn't
          if ! aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "Creating S3 bucket: $BUCKET_NAME"
            aws s3api create-bucket --bucket "$BUCKET_NAME" --create-bucket-configuration LocationConstraint=af-south-1
            aws s3api put-bucket-versioning --bucket "$BUCKET_NAME" --versioning-configuration Status=Enabled
            aws s3api put-bucket-encryption --bucket "$BUCKET_NAME" --server-side-encryption-configuration '{"Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}'
          else
            echo "S3 bucket already exists: $BUCKET_NAME"
          fi

          # Check if DynamoDB table exists, create if it doesn't
          if ! aws dynamodb describe-table --table-name "$TABLE_NAME" >/dev/null 2>&1; then
            echo "Creating DynamoDB table: $TABLE_NAME"
            aws dynamodb create-table --table-name "$TABLE_NAME" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST
          else
            echo "DynamoDB table already exists: $TABLE_NAME"
          fi

      - name: Check Terraform state and initialize
        run: |
          cd terraform
          BUCKET_NAME="credex-terraform-state-${ENVIRONMENT}"
          
          # Check if Terraform state file exists in S3
          if aws s3 ls s3://$BUCKET_NAME/terraform.tfstate; then
            echo "Terraform state file found. Initializing normally..."
            terraform init \
              -backend-config="bucket=credex-terraform-state-${ENVIRONMENT}" \
              -backend-config="key=terraform.tfstate" \
              -backend-config="region=af-south-1" \
              -backend-config="dynamodb_table=credex-terraform-state-lock-${ENVIRONMENT}"
          else
            echo "Terraform state file not found. Initializing with -force-copy..."
            terraform init \
              -backend-config="bucket=credex-terraform-state-${ENVIRONMENT}" \
              -backend-config="key=terraform.tfstate" \
              -backend-config="region=af-south-1" \
              -backend-config="dynamodb_table=credex-terraform-state-lock-${ENVIRONMENT}" \
              -force-copy
          fi

      - name: Terraform Plan
        env:
          TF_VAR_environment: ${{ env.ENVIRONMENT }}
        run: |
          cd terraform
          echo "Current environment: ${ENVIRONMENT}"
          echo "Planning Terraform changes..."
          terraform plan -input=false -out=tfplan -target=module.connectors

      - name: Terraform Apply
        env:
          TF_VAR_environment: ${{ env.ENVIRONMENT }}
        run: |
          cd terraform
          echo "Current environment: ${ENVIRONMENT}"
          echo "Applying Terraform changes..."
          terraform apply -auto-approve -input=false tfplan

          echo "Terraform apply completed successfully"

      - name: Print Infrastructure Outputs
        run: |
          cd terraform
          echo "Current environment: ${ENVIRONMENT}"
          echo "Retrieving infrastructure outputs..."
          echo "========================================"
          echo "Infrastructure Outputs:"
          echo "========================================"
          terraform output
          echo "========================================"
          echo "Key Outputs:"
          echo "VPC ID: $(terraform output -raw vpc_id)"
          echo "Subnet IDs: $(terraform output -json subnet_ids)"
          echo "Neo4j Security Group ID: $(terraform output -raw neo4j_security_group_id)"
          echo "Key Pair Name: $(terraform output -raw key_pair_name)"
          echo "ALB Security Group ID: $(terraform output -raw alb_security_group_id)"
          echo "========================================"
