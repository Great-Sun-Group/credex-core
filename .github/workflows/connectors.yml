name: Deploy Connectors

on:
  workflow_dispatch:

jobs:
  deploy_infrastructure:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/prod' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Environment
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/stage" ]]; then
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=development" >> $GITHUB_ENV
          fi

      - name: Set Bucket and Table Names
        run: |
          echo "TF_STATE_BUCKET=credex-terraform-state-${{ env.ENVIRONMENT }}" >> $GITHUB_ENV
          echo "TF_LOCK_TABLE=credex-terraform-lock-${{ env.ENVIRONMENT }}" >> $GITHUB_ENV

      - name: Debug Environment Variables
        run: |
          echo "ENVIRONMENT: ${{ env.ENVIRONMENT }}"
          echo "TF_STATE_BUCKET: ${{ env.TF_STATE_BUCKET }}"
          echo "TF_LOCK_TABLE: ${{ env.TF_LOCK_TABLE }}"
          echo "Current branch: ${{ github.ref }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1

      - name: Check and Create S3 bucket for Terraform state
        run: |
          echo "Attempting to create bucket: ${{ env.TF_STATE_BUCKET }}"
          if aws s3api head-bucket --bucket ${{ env.TF_STATE_BUCKET }} 2>/dev/null; then
            echo "S3 bucket ${{ env.TF_STATE_BUCKET }} already exists. Skipping creation."
          else
            echo "Creating S3 bucket ${{ env.TF_STATE_BUCKET }}..."
            aws s3api create-bucket --bucket ${{ env.TF_STATE_BUCKET }} --region af-south-1 --create-bucket-configuration LocationConstraint=af-south-1
            aws s3api put-bucket-versioning --bucket ${{ env.TF_STATE_BUCKET }} --versioning-configuration Status=Enabled
            aws s3api put-bucket-encryption --bucket ${{ env.TF_STATE_BUCKET }} --server-side-encryption-configuration '{"Rules": [{"ApplyServerSideEncryptionByDefault": {"SSEAlgorithm": "AES256"}}]}'
          fi

      - name: Check and Create DynamoDB table for Terraform state locking
        run: |
          if aws dynamodb describe-table --table-name ${{ env.TF_LOCK_TABLE }} 2>/dev/null; then
            echo "DynamoDB table ${{ env.TF_LOCK_TABLE }} already exists. Skipping creation."
          else
            echo "Creating DynamoDB table ${{ env.TF_LOCK_TABLE }}..."
            aws dynamodb create-table --table-name ${{ env.TF_LOCK_TABLE }} \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init and Apply
        env:
          TF_VAR_environment: ${{ env.ENVIRONMENT }}
          TF_VAR_terraform_state_bucket: ${{ env.TF_STATE_BUCKET }}
          TF_VAR_terraform_lock_table: ${{ env.TF_LOCK_TABLE }}
          TF_VAR_create_ecr: "true"
          TF_VAR_create_ecs_cluster: "true"
          TF_VAR_create_log_group: "true"
          TF_VAR_create_key_pair: "true"
          TF_VAR_create_iam_roles: "true"
          TF_VAR_create_load_balancer: "true"
          TF_VAR_create_target_group: "true"
          TF_VAR_create_security_groups: "true"
          TF_VAR_create_neo4j_instances: "true"
        run: |
          cd terraform
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ env.ENVIRONMENT }}/terraform.tfstate" \
            -backend-config="region=af-south-1" \
            -backend-config="dynamodb_table=${{ env.TF_LOCK_TABLE }}"
          terraform workspace select ${{ env.ENVIRONMENT }} || terraform workspace new ${{ env.ENVIRONMENT }}
          terraform apply -auto-approve -target=module.shared_resources

      - name: Get Infrastructure Outputs
        run: |
          cd terraform
          echo "VPC_ID=$(terraform output -raw vpc_id)" >> $GITHUB_ENV
          echo "SUBNET_IDS=$(terraform output -raw subnet_ids)" >> $GITHUB_ENV
          echo "NEO4J_SECURITY_GROUP_ID=$(terraform output -raw neo4j_security_group_id)" >> $GITHUB_ENV
          echo "KEY_PAIR_NAME=$(terraform output -raw key_pair_name)" >> $GITHUB_ENV
          echo "ALB_SECURITY_GROUP_ID=$(terraform output -raw alb_security_group_id)" >> $GITHUB_ENV
          echo "ECS_TASKS_SECURITY_GROUP_ID=$(terraform output -raw ecs_tasks_security_group_id)" >> $GITHUB_ENV
          echo "ALB_DNS_NAME=$(terraform output -raw alb_dns_name)" >> $GITHUB_ENV
          echo "TARGET_GROUP_ARN=$(terraform output -raw target_group_arn)" >> $GITHUB_ENV

      - name: Print Infrastructure Information
        run: |
          echo "Infrastructure deployed for the ${{ env.ENVIRONMENT }} environment:"
          echo "VPC_ID: $VPC_ID"
          echo "SUBNET_IDS: $SUBNET_IDS"
          echo "NEO4J_SECURITY_GROUP_ID: $NEO4J_SECURITY_GROUP_ID"
          echo "KEY_PAIR_NAME: $KEY_PAIR_NAME"
          echo "ALB_SECURITY_GROUP_ID: $ALB_SECURITY_GROUP_ID"
          echo "ECS_TASKS_SECURITY_GROUP_ID: $ECS_TASKS_SECURITY_GROUP_ID"
          echo "ALB_DNS_NAME: $ALB_DNS_NAME"
          echo "TARGET_GROUP_ARN: $TARGET_GROUP_ARN"
