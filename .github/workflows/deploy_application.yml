name: Deploy Application

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *" # Daily at midnight

jobs:
  deploy_application:
    runs-on: ubuntu-latest

    steps:
      - name: Determine environment
        id: determine_env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/stage" ]]; then
            echo "ENVIRONMENT=staging" >> $GITHUB_OUTPUT
          else
            echo "ENVIRONMENT=development" >> $GITHUB_OUTPUT
          fi
          echo "Determined environment: ${{ steps.determine_env.outputs.ENVIRONMENT }}"

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Debug AWS Credentials
        run: |
          echo "Environment: ${{ steps.determine_env.outputs.ENVIRONMENT }}"
          echo "AWS Region Secret Name: ${{ format('{0}_AWS_REGION', steps.determine_env.outputs.ENVIRONMENT) }}"
          echo "AWS Access Key ID Secret Name: ${{ format('{0}_AWS_ACCESS_KEY_ID', steps.determine_env.outputs.ENVIRONMENT) }}"
          echo "AWS Secret Access Key Secret Name: ${{ format('{0}_AWS_SECRET_ACCESS_KEY', steps.determine_env.outputs.ENVIRONMENT) }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets[format('{0}_AWS_ACCESS_KEY_ID', steps.determine_env.outputs.ENVIRONMENT)] }}
          aws-secret-access-key: ${{ secrets[format('{0}_AWS_SECRET_ACCESS_KEY', steps.determine_env.outputs.ENVIRONMENT)] }}
          aws-region: ${{ secrets[format('{0}_AWS_REGION', steps.determine_env.outputs.ENVIRONMENT)] }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: credex-core-${{ steps.determine_env.outputs.ENVIRONMENT }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --target ${{ steps.determine_env.outputs.ENVIRONMENT }} \
            --build-arg NEO_4J_LEDGER_SPACE_USER=${{ secrets.NEO_4J_LEDGER_SPACE_USER }} \
            --build-arg NEO_4J_LEDGER_SPACE_PASS=${{ secrets.NEO_4J_LEDGER_SPACE_PASS }} \
            --build-arg NEO_4J_LEDGER_SPACE_BOLT_URL=${{ secrets.NEO_4J_LEDGER_SPACE_BOLT_URL }} \
            --build-arg NEO_4J_SEARCH_SPACE_USER=${{ secrets.NEO_4J_SEARCH_SPACE_USER }} \
            --build-arg NEO_4J_SEARCH_SPACE_PASS=${{ secrets.NEO_4J_SEARCH_SPACE_PASS }} \
            --build-arg NEO_4J_SEARCH_SPACE_BOLT_URL=${{ secrets.NEO_4J_SEARCH_SPACE_BOLT_URL }} \
            --build-arg OPEN_EXCHANGE_RATES_API=${{ secrets.OPEN_EXCHANGE_RATES_API }} \
            --build-arg JWT_SECRET=${{ secrets.JWT_SECRET }} \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init and Apply for Application
        env:
          TF_VAR_environment: ${{ steps.determine_env.outputs.ENVIRONMENT }}
          TF_VAR_create_resource: "true"
        run: |
          cd terraform
          terraform init
          terraform workspace select ${{ steps.determine_env.outputs.ENVIRONMENT }} || terraform workspace new ${{ steps.determine_env.outputs.ENVIRONMENT }}
          terraform apply -auto-approve -target=aws_ecs_task_definition.credex_core \
            -var="neo4j_ledger_space_user=${{ secrets.NEO_4J_LEDGER_SPACE_USER }}" \
            -var="neo4j_ledger_space_pass=${{ secrets.NEO_4J_LEDGER_SPACE_PASS }}" \
            -var="neo4j_ledger_space_bolt_url=${{ secrets.NEO_4J_LEDGER_SPACE_BOLT_URL }}" \
            -var="neo4j_search_space_user=${{ secrets.NEO_4J_SEARCH_SPACE_USER }}" \
            -var="neo4j_search_space_pass=${{ secrets.NEO_4J_SEARCH_SPACE_PASS }}" \
            -var="neo4j_search_space_bolt_url=${{ secrets.NEO_4J_SEARCH_SPACE_BOLT_URL }}" \
            -var="open_exchange_rates_api=${{ secrets.OPEN_EXCHANGE_RATES_API }}" \
            -var="jwt_secret=${{ secrets.JWT_SECRET }}"

      - name: Update ECS Service
        run: |
          TASK_DEF_ARN=$(terraform output -raw ecs_task_definition_arn)
          aws ecs update-service --cluster credex-cluster-${{ steps.determine_env.outputs.ENVIRONMENT }} --service credex-core-service-${{ steps.determine_env.outputs.ENVIRONMENT }} --task-definition $TASK_DEF_ARN
          echo "Waiting for service to stabilize..."
          aws ecs wait services-stable --cluster credex-cluster-${{ steps.determine_env.outputs.ENVIRONMENT }} --services credex-core-service-${{ steps.determine_env.outputs.ENVIRONMENT }}

      - name: Print Deployment Information
        run: |
          echo "Deployment completed successfully. New task definition ARN: $TASK_DEF_ARN"
