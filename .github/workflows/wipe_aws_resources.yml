name: Wipe AWS Resources

on:
  workflow_dispatch:
    inputs:
      confirm_wipe:
        description: 'Type "YES" to confirm wiping all AWS resources'
        required: true

jobs:
  wipe-aws-resources:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_wipe == 'YES'
    environment: ${{ github.ref == 'refs/heads/prod' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set Environment
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
        elif [[ "${{ github.ref }}" == "refs/heads/stage" ]]; then
          echo "ENVIRONMENT=staging" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=development" >> $GITHUB_ENV
        fi

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: af-south-1

    - name: Wipe EC2 Resources
      run: |
        echo "Terminating EC2 instances..."
        instance_ids=$(aws ec2 describe-instances --filters Name=instance-state-name,Values=pending,running,stopping,stopped --query 'Reservations[*].Instances[*].[InstanceId]' --output text)
        if [ -n "$instance_ids" ]; then
          aws ec2 terminate-instances --instance-ids $instance_ids
          echo "Waiting for instances to terminate..."
          aws ec2 wait instance-terminated --instance-ids $instance_ids
        else
          echo "No running instances to terminate."
        fi

        echo "Deleting EC2 security groups..."
        sg_ids=$(aws ec2 describe-security-groups --query 'SecurityGroups[?GroupName!=`default`].[GroupId]' --output text)
        for sg_id in $sg_ids; do
          if ! aws ec2 delete-security-group --group-id $sg_id 2>/dev/null; then
            echo "Failed to delete security group $sg_id. It may have dependencies."
          fi
        done

        echo "Deleting EC2 key pairs..."
        key_pairs=$(aws ec2 describe-key-pairs --query 'KeyPairs[*].[KeyName]' --output text)
        for key in $key_pairs; do
          aws ec2 delete-key-pair --key-name $key
        done

    - name: Wipe VPC Resources
      run: |
        echo "Deleting VPC resources..."
        vpc_ids=$(aws ec2 describe-vpcs --query 'Vpcs[?IsDefault==`false`].[VpcId]' --output text)
        for vpc_id in $vpc_ids; do
          echo "Processing VPC: $vpc_id"
          
          # Detach and delete Internet Gateways
          igw_ids=$(aws ec2 describe-internet-gateways --filters Name=attachment.vpc-id,Values=$vpc_id --query 'InternetGateways[*].[InternetGatewayId]' --output text)
          for igw_id in $igw_ids; do
            aws ec2 detach-internet-gateway --internet-gateway-id $igw_id --vpc-id $vpc_id
            aws ec2 delete-internet-gateway --internet-gateway-id $igw_id
          done

          # Delete Subnets
          subnet_ids=$(aws ec2 describe-subnets --filters Name=vpc-id,Values=$vpc_id --query 'Subnets[*].[SubnetId]' --output text)
          for subnet_id in $subnet_ids; do
            aws ec2 delete-subnet --subnet-id $subnet_id
          done

          # Delete Route Tables
          rt_ids=$(aws ec2 describe-route-tables --filters Name=vpc-id,Values=$vpc_id --query 'RouteTables[?Associations[0].Main!=`true`].[RouteTableId]' --output text)
          for rt_id in $rt_ids; do
            aws ec2 delete-route-table --route-table-id $rt_id
          done

          # Delete Network ACLs
          nacl_ids=$(aws ec2 describe-network-acls --filters Name=vpc-id,Values=$vpc_id --query 'NetworkAcls[?!IsDefault].[NetworkAclId]' --output text)
          for nacl_id in $nacl_ids; do
            aws ec2 delete-network-acl --network-acl-id $nacl_id
          done

          # Delete Security Groups (except the default one)
          sg_ids=$(aws ec2 describe-security-groups --filters Name=vpc-id,Values=$vpc_id --query 'SecurityGroups[?GroupName!=`default`].[GroupId]' --output text)
          for sg_id in $sg_ids; do
            aws ec2 delete-security-group --group-id $sg_id
          done

          # Finally, delete the VPC
          if aws ec2 delete-vpc --vpc-id $vpc_id; then
            echo "Successfully deleted VPC $vpc_id"
          else
            echo "Failed to delete VPC $vpc_id. It may still have dependencies."
          fi
        done

    - name: Wipe S3 Buckets
      run: |
        echo "Deleting S3 buckets..."
        buckets=$(aws s3 ls | awk '{print $3}')
        for bucket in $buckets; do
          echo "Processing bucket: $bucket"
          # Remove all versions and delete markers
          versions=$(aws s3api list-object-versions --bucket $bucket --output json --query '{Objects: Versions[].{Key:Key,VersionId:VersionId}, DeleteMarkers: DeleteMarkers[].{Key:Key,VersionId:VersionId}}')
          if [ "$versions" != "{}" ]; then
            echo "$versions" | jq -r '.Objects[] | .Key + " " + .VersionId' | while read key version_id; do
              aws s3api delete-object --bucket $bucket --key "$key" --version-id "$version_id"
            done
            echo "$versions" | jq -r '.DeleteMarkers[] | .Key + " " + .VersionId' | while read key version_id; do
              aws s3api delete-object --bucket $bucket --key "$key" --version-id "$version_id"
            done
          fi
          # Delete the bucket
          if aws s3 rb s3://$bucket --force 2>/dev/null; then
            echo "Successfully deleted bucket $bucket"
          else
            echo "Failed to delete bucket $bucket"
          fi
        done

    - name: Wipe RDS Instances and Subnet Groups
      run: |
        echo "Deleting RDS instances..."
        rds_instances=$(aws rds describe-db-instances --query 'DBInstances[*].[DBInstanceIdentifier]' --output text)
        for instance in $rds_instances; do
          aws rds delete-db-instance --db-instance-identifier $instance --skip-final-snapshot
        done

        echo "Deleting RDS DB Subnet Groups..."
        subnet_groups=$(aws rds describe-db-subnet-groups --query 'DBSubnetGroups[*].[DBSubnetGroupName]' --output text)
        for group in $subnet_groups; do
          aws rds delete-db-subnet-group --db-subnet-group-name $group
        done

    - name: Wipe ECS Clusters
      run: |
        echo "Deleting ECS clusters, services, and tasks..."
        clusters=$(aws ecs list-clusters --query 'clusterArns[]' --output text)
        for cluster in $clusters; do
          echo "Processing cluster: $cluster"
          
          # List and stop all tasks
          tasks=$(aws ecs list-tasks --cluster $cluster --query 'taskArns[]' --output text)
          if [ -n "$tasks" ]; then
            echo "Stopping tasks in cluster $cluster"
            for task in $tasks; do
              if ! aws ecs stop-task --cluster $cluster --task $task > /dev/null 2>&1; then
                echo "Failed to stop task $task in cluster $cluster"
              fi
            done
            
            echo "Waiting for tasks to stop..."
            aws ecs wait tasks-stopped --cluster $cluster --tasks $tasks
          else
            echo "No tasks found in cluster $cluster"
          fi
          
          # List and delete all services
          services=$(aws ecs list-services --cluster $cluster --query 'serviceArns[]' --output text)
          if [ -n "$services" ]; then
            echo "Deleting services in cluster $cluster"
            for service in $services; do
              if ! aws ecs update-service --cluster $cluster --service $service --desired-count 0 > /dev/null 2>&1; then
                echo "Failed to update service $service in cluster $cluster"
              fi
              if ! aws ecs delete-service --cluster $cluster --service $service --force > /dev/null 2>&1; then
                echo "Failed to delete service $service in cluster $cluster"
              fi
            done
          else
            echo "No services found in cluster $cluster"
          fi
          
          # Delete the cluster
          echo "Deleting cluster $cluster"
          if ! aws ecs delete-cluster --cluster $cluster > /dev/null 2>&1; then
            echo "Failed to delete cluster $cluster"
          fi
        done

    - name: Wipe ECR Repositories
      run: |
        echo "Deleting ECR repositories..."
        repos=$(aws ecr describe-repositories --query 'repositories[*].[repositoryName]' --output text)
        for repo in $repos; do
          aws ecr delete-repository --repository-name $repo --force
        done

    - name: Wipe CloudWatch Log Groups
      run: |
        echo "Deleting CloudWatch Log Groups..."
        log_groups=$(aws logs describe-log-groups --query 'logGroups[*].[logGroupName]' --output text)
        for log_group in $log_groups; do
          aws logs delete-log-group --log-group-name $log_group
        done

    - name: Wipe IAM Roles
      run: |
        echo "Deleting IAM Roles..."
        roles=$(aws iam list-roles --query 'Roles[?starts_with(RoleName, `ecs-`) == `true`].[RoleName]' --output text)
        for role in $roles; do
          # Detach all policies from the role
          attached_policies=$(aws iam list-attached-role-policies --role-name $role --query 'AttachedPolicies[*].[PolicyArn]' --output text)
          for policy in $attached_policies; do
            aws iam detach-role-policy --role-name $role --policy-arn $policy
          done
          # Delete the role
          aws iam delete-role --role-name $role
        done

    - name: Wipe Load Balancers and Target Groups
      run: |
        echo "Deleting Application Load Balancers..."
        albs=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[*].[LoadBalancerArn]' --output text)
        for alb in $albs; do
          aws elbv2 delete-load-balancer --load-balancer-arn $alb
        done

        echo "Deleting Target Groups..."
        target_groups=$(aws elbv2 describe-target-groups --query 'TargetGroups[*].[TargetGroupArn]' --output text)
        for tg in $target_groups; do
          aws elbv2 delete-target-group --target-group-arn $tg
        done

    - name: Final Message
      run: |
        echo "AWS resource wipe completed."
        echo "All resources created by these workflows should now be deleted."
        echo "If you encounter any issues or find remaining resources, please investigate and delete them manually."
        echo "You can now use your Terraform configurations to rebuild the infrastructure from scratch if needed."
