name: Deploy Connectors

on:
  workflow_dispatch:
    inputs:
      force_unlock:
        description: 'Force remove Terraform state lock'
        required: false
        type: boolean
        default: false

jobs:
  deploy_infrastructure:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/prod' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Environment
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/stage" ]]; then
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=development" >> $GITHUB_ENV
          fi
          echo "Environment set to: $ENVIRONMENT"

      - name: Set Bucket and Table Names
        run: |
          echo "TF_STATE_BUCKET=credex-terraform-state-${{ env.ENVIRONMENT }}" >> $GITHUB_ENV
          echo "TF_LOCK_TABLE=credex-terraform-lock-${{ env.ENVIRONMENT }}" >> $GITHUB_ENV
          echo "State bucket set to: $TF_STATE_BUCKET"
          echo "Lock table set to: $TF_LOCK_TABLE"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Print Environment Variables
        run: |
          echo "Printing all environment variables:"
          env | sort

      - name: Terraform Init and Apply
        env:
          TF_VAR_environment: ${{ env.ENVIRONMENT }}
          TF_VAR_terraform_state_bucket: ${{ env.TF_STATE_BUCKET }}
          TF_VAR_terraform_lock_table: ${{ env.TF_LOCK_TABLE }}
          TF_VAR_create_ecr: "true"
          TF_VAR_create_ecs_cluster: "true"
          TF_VAR_create_log_group: "true"
          TF_VAR_create_key_pair: "true"
          TF_VAR_create_iam_roles: "true"
          TF_VAR_create_load_balancer: "true"
          TF_VAR_create_target_group: "true"
          TF_VAR_create_security_groups: "true"
          TF_VAR_create_neo4j_instances: "true"
        run: |
          check_and_remove_lock() {
            echo "Checking for existing state lock..."
            LOCK_ID=$(aws dynamodb get-item --table-name ${{ env.TF_LOCK_TABLE }} --key '{"LockID": {"S": "${{ env.TF_STATE_BUCKET }}/${{ env.ENVIRONMENT }}/terraform.tfstate-md5"}}' --query 'Item.LockID.S' --output text)
            if [ "$LOCK_ID" != "None" ]; then
              echo "Found existing lock. Checking lock details..."
              LOCK_INFO=$(aws dynamodb get-item --table-name ${{ env.TF_LOCK_TABLE }} --key '{"LockID": {"S": "${{ env.TF_STATE_BUCKET }}/${{ env.ENVIRONMENT }}/terraform.tfstate-md5"}}' --query 'Item.Info.S' --output text)
              echo "Full Lock Info:"
              echo "$LOCK_INFO"
              LOCK_TIME=$(echo $LOCK_INFO | jq -r '.Created')
              CURRENT_TIME=$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")
              TIME_DIFF=$(( $(date -d "$CURRENT_TIME" +%s) - $(date -d "$LOCK_TIME" +%s) ))
              
              echo "Lock created at: $LOCK_TIME"
              echo "Current time: $CURRENT_TIME"
              echo "Lock Age: $TIME_DIFF seconds"
              
              if [ $TIME_DIFF -gt 3600 ] || [ "${{ inputs.force_unlock }}" == "true" ]; then
                echo "Lock is older than 1 hour or force unlock is enabled. Removing lock..."
                aws dynamodb delete-item --table-name ${{ env.TF_LOCK_TABLE }} --key '{"LockID": {"S": "${{ env.TF_STATE_BUCKET }}/${{ env.ENVIRONMENT }}/terraform.tfstate-md5"}}'
                echo "Lock removed."
              else
                echo "Lock is less than 1 hour old and force unlock is not enabled."
                exit 1
              fi
            else
              echo "No existing lock found."
            fi
          }

          cd terraform
          echo "Initializing Terraform..."
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ env.ENVIRONMENT }}/terraform.tfstate" \
            -backend-config="region=af-south-1" \
            -backend-config="dynamodb_table=${{ env.TF_LOCK_TABLE }}"
          
          echo "Selecting/Creating Terraform workspace..."
          terraform workspace select ${{ env.ENVIRONMENT }} || terraform workspace new ${{ env.ENVIRONMENT }}
          
          check_and_remove_lock
          echo "Applying Terraform changes..."
          terraform apply -auto-approve -target=module.shared_resources

      - name: Get Infrastructure Outputs
        run: |
          cd terraform
          echo "Retrieving infrastructure outputs..."
          echo "VPC_ID=$(terraform output -raw vpc_id)" >> $GITHUB_ENV
          echo "SUBNET_IDS=$(terraform output -raw subnet_ids)" >> $GITHUB_ENV
          echo "NEO4J_SECURITY_GROUP_ID=$(terraform output -raw neo4j_security_group_id)" >> $GITHUB_ENV
          echo "KEY_PAIR_NAME=$(terraform output -raw key_pair_name)" >> $GITHUB_ENV
          echo "ALB_SECURITY_GROUP_ID=$(terraform output -raw alb_security_group_id)" >> $GITHUB_ENV
          echo "ECS_TASKS_SECURITY_GROUP_ID=$(terraform output -raw ecs_tasks_security_group_id)" >> $GITHUB_ENV
          echo "ALB_DNS_NAME=$(terraform output -raw alb_dns_name)" >> $GITHUB_ENV
          echo "TARGET_GROUP_ARN=$(terraform output -raw target_group_arn)" >> $GITHUB_ENV

      - name: Print Infrastructure Information
        run: |
          echo "Infrastructure deployed for the ${{ env.ENVIRONMENT }} environment:"
          echo "VPC_ID: $VPC_ID"
          echo "SUBNET_IDS: $SUBNET_IDS"
          echo "NEO4J_SECURITY_GROUP_ID: $NEO4J_SECURITY_GROUP_ID"
          echo "KEY_PAIR_NAME: $KEY_PAIR_NAME"
          echo "ALB_SECURITY_GROUP_ID: $ALB_SECURITY_GROUP_ID"
          echo "ECS_TASKS_SECURITY_GROUP_ID: $ECS_TASKS_SECURITY_GROUP_ID"
          echo "ALB_DNS_NAME: $ALB_DNS_NAME"
          echo "TARGET_GROUP_ARN: $TARGET_GROUP_ARN"
