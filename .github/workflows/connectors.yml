name: Deploy and Manage Connectors

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Action to perform (create/update/import)"
        required: true
        default: "update"
      component:
        description: "Component to manage (all/vpc/subnets/igw/nat/routes/sg/ecr/ecs/logs/iam/alb/keypair/neo4j_sg/acm/route53)"
        required: true
        default: "all"

jobs:
  deploy_infrastructure:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/prod' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}

    env:
      ENVIRONMENT: ${{ github.ref == 'refs/heads/prod' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: |
          cd terraform
          echo "Initializing Terraform..."
          terraform init

      - name: Set Terraform Variables
        run: |
          echo "TF_VAR_create_vpc=false" >> $GITHUB_ENV
          echo "TF_VAR_create_subnets=false" >> $GITHUB_ENV
          echo "TF_VAR_create_igw=false" >> $GITHUB_ENV
          echo "TF_VAR_create_nat=false" >> $GITHUB_ENV
          echo "TF_VAR_create_routes=false" >> $GITHUB_ENV
          echo "TF_VAR_create_sg=false" >> $GITHUB_ENV
          echo "TF_VAR_create_ecr=false" >> $GITHUB_ENV
          echo "TF_VAR_create_ecs=false" >> $GITHUB_ENV
          echo "TF_VAR_create_logs=false" >> $GITHUB_ENV
          echo "TF_VAR_create_iam=false" >> $GITHUB_ENV
          echo "TF_VAR_create_load_balancer=false" >> $GITHUB_ENV
          echo "TF_VAR_create_target_group=false" >> $GITHUB_ENV
          echo "TF_VAR_create_key_pair=false" >> $GITHUB_ENV
          echo "TF_VAR_create_neo4j_security_group=false" >> $GITHUB_ENV
          echo "TF_VAR_create_acm=false" >> $GITHUB_ENV
          echo "TF_VAR_create_security_groups=false" >> $GITHUB_ENV
          echo "TF_VAR_create_ecs_cluster=false" >> $GITHUB_ENV
          echo "TF_VAR_create_log_group=false" >> $GITHUB_ENV
          echo "TF_VAR_create_iam_roles=false" >> $GITHUB_ENV
          echo "TF_VAR_create_route53_zone=false" >> $GITHUB_ENV

          if [[ "${{ github.event.inputs.component }}" == "all" || "${{ github.event.inputs.component }}" == "vpc" ]]; then
            echo "TF_VAR_create_vpc=true" >> $GITHUB_ENV
          fi
          if [[ "${{ github.event.inputs.component }}" == "all" || "${{ github.event.inputs.component }}" == "subnets" ]]; then
            echo "TF_VAR_create_subnets=true" >> $GITHUB_ENV
          fi
          if [[ "${{ github.event.inputs.component }}" == "all" || "${{ github.event.inputs.component }}" == "igw" ]]; then
            echo "TF_VAR_create_igw=true" >> $GITHUB_ENV
          fi
          if [[ "${{ github.event.inputs.component }}" == "all" || "${{ github.event.inputs.component }}" == "nat" ]]; then
            echo "TF_VAR_create_nat=true" >> $GITHUB_ENV
          fi
          if [[ "${{ github.event.inputs.component }}" == "all" || "${{ github.event.inputs.component }}" == "routes" ]]; then
            echo "TF_VAR_create_routes=true" >> $GITHUB_ENV
          fi
          if [[ "${{ github.event.inputs.component }}" == "all" || "${{ github.event.inputs.component }}" == "sg" ]]; then
            echo "TF_VAR_create_sg=true" >> $GITHUB_ENV
            echo "TF_VAR_create_security_groups=true" >> $GITHUB_ENV
          fi
          if [[ "${{ github.event.inputs.component }}" == "all" || "${{ github.event.inputs.component }}" == "ecr" ]]; then
            echo "TF_VAR_create_ecr=true" >> $GITHUB_ENV
          fi
          if [[ "${{ github.event.inputs.component }}" == "all" || "${{ github.event.inputs.component }}" == "ecs" ]]; then
            echo "TF_VAR_create_ecs=true" >> $GITHUB_ENV
            echo "TF_VAR_create_ecs_cluster=true" >> $GITHUB_ENV
          fi
          if [[ "${{ github.event.inputs.component }}" == "all" || "${{ github.event.inputs.component }}" == "logs" ]]; then
            echo "TF_VAR_create_logs=true" >> $GITHUB_ENV
            echo "TF_VAR_create_log_group=true" >> $GITHUB_ENV
          fi
          if [[ "${{ github.event.inputs.component }}" == "all" || "${{ github.event.inputs.component }}" == "iam" ]]; then
            echo "TF_VAR_create_iam=true" >> $GITHUB_ENV
            echo "TF_VAR_create_iam_roles=true" >> $GITHUB_ENV
          fi
          if [[ "${{ github.event.inputs.component }}" == "all" || "${{ github.event.inputs.component }}" == "alb" ]]; then
            echo "TF_VAR_create_load_balancer=true" >> $GITHUB_ENV
            echo "TF_VAR_create_target_group=true" >> $GITHUB_ENV
          fi
          if [[ "${{ github.event.inputs.component }}" == "all" || "${{ github.event.inputs.component }}" == "keypair" ]]; then
            echo "TF_VAR_create_key_pair=true" >> $GITHUB_ENV
          fi
          if [[ "${{ github.event.inputs.component }}" == "all" || "${{ github.event.inputs.component }}" == "neo4j_sg" ]]; then
            echo "TF_VAR_create_neo4j_security_group=true" >> $GITHUB_ENV
          fi
          if [[ "${{ github.event.inputs.component }}" == "all" || "${{ github.event.inputs.component }}" == "acm" ]]; then
            echo "TF_VAR_create_acm=true" >> $GITHUB_ENV
          fi
          if [[ "${{ github.event.inputs.component }}" == "all" || "${{ github.event.inputs.component }}" == "route53" ]]; then
            echo "TF_VAR_create_route53_zone=true" >> $GITHUB_ENV
          fi

      - name: Import Resources
        if: github.event.inputs.action == 'import'
        env:
          TF_VAR_environment: ${{ env.ENVIRONMENT }}
        run: |
          cd terraform
          if [[ "${{ github.event.inputs.component }}" == "all" || "${{ github.event.inputs.component }}" == "logs" ]]; then
            terraform import -var="environment=${ENVIRONMENT}" module.app.aws_cloudwatch_log_group.ecs_logs[0] /ecs/credex-core-${ENVIRONMENT}
          fi
          if [[ "${{ github.event.inputs.component }}" == "all" || "${{ github.event.inputs.component }}" == "iam" ]]; then
            terraform import -var="environment=${ENVIRONMENT}" module.app.aws_iam_role.ecs_execution_role[0] ecs-execution-role-${ENVIRONMENT}
            terraform import -var="environment=${ENVIRONMENT}" module.app.aws_iam_role.ecs_task_role[0] ecs-task-role-${ENVIRONMENT}
          fi

      - name: Terraform Plan
        env:
          TF_VAR_environment: ${{ env.ENVIRONMENT }}
        run: |
          cd terraform
          echo "Planning Terraform changes..."
          terraform plan -input=false -out=tfplan

      - name: Terraform Apply
        if: github.event.inputs.action != 'import'
        env:
          TF_VAR_environment: ${{ env.ENVIRONMENT }}
        run: |
          cd terraform
          echo "Applying Terraform changes..."
          terraform apply -auto-approve -input=false tfplan

          echo "Terraform apply completed successfully"

      - name: Get Infrastructure Outputs
        run: |
          cd terraform
          echo "Retrieving infrastructure outputs..."
          terraform output || { echo "Failed to retrieve Terraform outputs"; exit 1; }
          echo "VPC_ID=$(terraform output -raw vpc_id)" >> $GITHUB_ENV || true
          echo "SUBNET_IDS=$(terraform output -raw subnet_ids)" >> $GITHUB_ENV || true
          echo "NEO4J_SECURITY_GROUP_ID=$(terraform output -raw neo4j_security_group_id)" >> $GITHUB_ENV || true
          echo "KEY_PAIR_NAME=$(terraform output -raw key_pair_name)" >> $GITHUB_ENV || true
          echo "ALB_SECURITY_GROUP_ID=$(terraform output -raw alb_security_group_id)" >> $GITHUB_ENV || true
          echo "ROUTE53_ZONE_ID=$(terraform output -raw route53_zone_id)" >> $GITHUB_ENV || true
