name: Deploy Databases

on:
  workflow_dispatch:
    inputs:
      force_unlock:
        description: 'Force remove Terraform state lock'
        required: false
        default: 'false'

jobs:
  deploy_neo4j:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/prod' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Environment
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/stage" ]]; then
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=development" >> $GITHUB_ENV
          fi

      - name: Set Bucket and Table Names
        run: |
          echo "TF_STATE_BUCKET=credex-terraform-state-${{ env.ENVIRONMENT }}" >> $GITHUB_ENV
          echo "TF_LOCK_TABLE=credex-terraform-lock-${{ env.ENVIRONMENT }}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1

      - name: Check and Remove Terraform State Lock
        run: |
          LOCK_ID=$(aws dynamodb get-item --table-name ${{ env.TF_LOCK_TABLE }} --key '{"LockID": {"S": "credex-terraform-state-${{ env.ENVIRONMENT }}/${{ env.ENVIRONMENT }}/terraform.tfstate-md5"}}' --query 'Item.LockID.S' --output text)
          if [ "$LOCK_ID" != "None" ]; then
            echo "Found existing lock. Checking if it's stale or force unlock is enabled..."
            LOCK_INFO=$(aws dynamodb get-item --table-name ${{ env.TF_LOCK_TABLE }} --key '{"LockID": {"S": "credex-terraform-state-${{ env.ENVIRONMENT }}/${{ env.ENVIRONMENT }}/terraform.tfstate-md5"}}' --query 'Item.Info.S' --output text)
            LOCK_TIME=$(echo $LOCK_INFO | jq -r '.Created')
            CURRENT_TIME=$(date -u +"%Y-%m-%dT%H:%M:%S.%NZ")
            TIME_DIFF=$(( $(date -d "$CURRENT_TIME" +%s) - $(date -d "$LOCK_TIME" +%s) ))
            if [ $TIME_DIFF -gt 3600 ] || [ "${{ github.event.inputs.force_unlock }}" == "true" ]; then
              echo "Removing lock..."
              aws dynamodb delete-item --table-name ${{ env.TF_LOCK_TABLE }} --key '{"LockID": {"S": "credex-terraform-state-${{ env.ENVIRONMENT }}/${{ env.ENVIRONMENT }}/terraform.tfstate-md5"}}'
            else
              echo "Lock is not stale and force unlock is not enabled. Please wait for the other operation to complete or use force unlock."
              exit 1
            fi
          else
            echo "No existing lock found."
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: |
          cd terraform
          terraform init \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ env.ENVIRONMENT }}/terraform.tfstate" \
            -backend-config="region=af-south-1" \
            -backend-config="dynamodb_table=${{ env.TF_LOCK_TABLE }}"

      - name: Terraform Apply
        env:
          TF_VAR_environment: ${{ env.ENVIRONMENT }}
          TF_VAR_create_neo4j_instances: "true"
          TF_VAR_create_key_pair: "true"
          TF_VAR_neo4j_enterprise_license: ${{ secrets.NEO4J_ENTERPRISE_LICENSE }}
        run: |
          cd terraform
          terraform workspace select ${{ env.ENVIRONMENT }} || terraform workspace new ${{ env.ENVIRONMENT }}
          terraform apply -auto-approve -target=module.neo4j

      - name: Print Neo4j Information
        run: |
          cd terraform
          echo "Neo4j Information for ${{ env.ENVIRONMENT }} environment:"
          echo "----------------------------------------"
          echo "NEO_4J_LEDGER_SPACE_BOLT_URL: $(terraform output -raw NEO_4J_LEDGER_SPACE_BOLT_URL)"
          echo "NEO_4J_SEARCH_SPACE_BOLT_URL: $(terraform output -raw NEO_4J_SEARCH_SPACE_BOLT_URL)"
          echo "NEO_4J_LEDGER_SPACE_USERNAME: $(terraform output -raw NEO_4J_LEDGER_SPACE_USERNAME)"
          echo "NEO_4J_SEARCH_SPACE_USERNAME: $(terraform output -raw NEO_4J_SEARCH_SPACE_USERNAME)"
          echo "NEO_4J_LEDGER_SPACE_PASSWORD: $(terraform output -raw NEO_4J_LEDGER_SPACE_PASSWORD)"
          echo "NEO_4J_SEARCH_SPACE_PASSWORD: $(terraform output -raw NEO_4J_SEARCH_SPACE_PASSWORD)"
          echo "----------------------------------------"
          echo "NEO4J_PRIVATE_KEY:"
          terraform output -raw neo4j_private_key
          echo "----------------------------------------"
          echo "Please save these values securely. You may need to manually set them as GitHub secrets or use them in your application configuration."
