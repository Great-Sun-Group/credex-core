name: Wipe AWS Resources

on:
  workflow_dispatch:
    inputs:
      confirm_wipe:
        description: 'Type "YES" to confirm wiping all AWS resources'
        required: true

jobs:
  wipe-aws-resources:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_wipe == 'YES'
    environment: ${{ github.ref == 'refs/heads/prod' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Environment
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/stage" ]]; then
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=development" >> $GITHUB_ENV
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1

      - name: Check AWS Permissions
        run: |
          echo "Checking AWS permissions..."
          aws sts get-caller-identity
          aws ec2 describe-vpcs --output json

      - name: Wipe EC2 Resources
        run: |
          echo "Terminating EC2 instances..."
          instance_ids=$(aws ec2 describe-instances --filters Name=instance-state-name,Values=pending,running,stopping,stopped --query 'Reservations[*].Instances[*].[InstanceId]' --output text)
          if [ -n "$instance_ids" ]; then
            aws ec2 terminate-instances --instance-ids $instance_ids
            echo "Waiting for instances to terminate..."
            aws ec2 wait instance-terminated --instance-ids $instance_ids
          else
            echo "No running instances to terminate."
          fi

          echo "Deleting EC2 key pairs..."
          key_pairs=$(aws ec2 describe-key-pairs --query 'KeyPairs[*].[KeyName]' --output text)
          for key in $key_pairs; do
            aws ec2 delete-key-pair --key-name $key
          done

      - name: Wipe VPC Resources
        run: |
          echo "Deleting VPC resources..."
          vpc_ids=$(aws ec2 describe-vpcs --query 'Vpcs[?IsDefault==`false`].[VpcId]' --output text)
          for vpc_id in $vpc_ids; do
            echo "Processing VPC: $vpc_id"
            
            # Handle public IP addresses
            echo "Handling public IP addresses..."
            network_interfaces=$(aws ec2 describe-network-interfaces --filters Name=vpc-id,Values=$vpc_id --query 'NetworkInterfaces[*].[NetworkInterfaceId]' --output text)
            for eni in $network_interfaces; do
              echo "Processing network interface: $eni"
              # Get all private IP addresses except the primary one
              private_ips=$(aws ec2 describe-network-interfaces --network-interface-ids $eni --query 'NetworkInterfaces[0].PrivateIpAddresses[?Primary==`false`].PrivateIpAddress' --output text)
              if [ -n "$private_ips" ]; then
                echo "Unassigning private IP addresses: $private_ips"
                aws ec2 unassign-private-ip-addresses --network-interface-id $eni --private-ip-addresses $private_ips || echo "Failed to unassign private IPs for $eni"
              else
                echo "No secondary private IPs to unassign for $eni"
              fi
              
              # Disassociate any associated public IP
              association_id=$(aws ec2 describe-network-interfaces --network-interface-ids $eni --query 'NetworkInterfaces[0].Association.AssociationId' --output text)
              if [ "$association_id" != "None" ] && [ -n "$association_id" ]; then
                echo "Disassociating public IP from $eni"
                aws ec2 disassociate-address --association-id $association_id || echo "Failed to disassociate public IP from $eni"
              fi
            done

            # Disassociate and release Elastic IP addresses
            echo "Disassociating and releasing Elastic IP addresses..."
            eip_alloc_ids=$(aws ec2 describe-addresses --filters "Name=domain,Values=vpc" --query 'Addresses[*].[AllocationId]' --output text)
            for eip_alloc_id in $eip_alloc_ids; do
              echo "Processing Elastic IP: $eip_alloc_id"
              association_id=$(aws ec2 describe-addresses --allocation-ids $eip_alloc_id --query 'Addresses[0].AssociationId' --output text)
              if [ "$association_id" != "None" ] && [ -n "$association_id" ]; then
                echo "Disassociating Elastic IP $eip_alloc_id from $association_id"
                aws ec2 disassociate-address --association-id $association_id || echo "Failed to disassociate Elastic IP $eip_alloc_id"
              fi
              echo "Releasing Elastic IP $eip_alloc_id"
              aws ec2 release-address --allocation-id $eip_alloc_id || echo "Failed to release Elastic IP $eip_alloc_id"
            done

            # Detach and delete Internet Gateways
            echo "Detaching and deleting Internet Gateways..."
            igw_ids=$(aws ec2 describe-internet-gateways --filters Name=attachment.vpc-id,Values=$vpc_id --query 'InternetGateways[*].[InternetGatewayId]' --output text)
            for igw_id in $igw_ids; do
              aws ec2 detach-internet-gateway --internet-gateway-id $igw_id --vpc-id $vpc_id || echo "Failed to detach Internet Gateway $igw_id"
              aws ec2 delete-internet-gateway --internet-gateway-id $igw_id || echo "Failed to delete Internet Gateway $igw_id"
            done

            # Delete Subnets
            echo "Deleting Subnets..."
            subnet_ids=$(aws ec2 describe-subnets --filters Name=vpc-id,Values=$vpc_id --query 'Subnets[*].[SubnetId]' --output text)
            for subnet_id in $subnet_ids; do
              aws ec2 delete-subnet --subnet-id $subnet_id || echo "Failed to delete Subnet $subnet_id"
            done

            # Delete Route Tables
            echo "Deleting Route Tables..."
            rt_ids=$(aws ec2 describe-route-tables --filters Name=vpc-id,Values=$vpc_id --query 'RouteTables[?Associations[0].Main!=`true`].[RouteTableId]' --output text)
            for rt_id in $rt_ids; do
              aws ec2 delete-route-table --route-table-id $rt_id || echo "Failed to delete Route Table $rt_id"
            done

            # Delete Network ACLs
            echo "Deleting Network ACLs..."
            nacl_ids=$(aws ec2 describe-network-acls --filters Name=vpc-id,Values=$vpc_id --query 'NetworkAcls[?!IsDefault].[NetworkAclId]' --output text)
            for nacl_id in $nacl_ids; do
              aws ec2 delete-network-acl --network-acl-id $nacl_id || echo "Failed to delete Network ACL $nacl_id"
            done

            # Delete Security Groups (except the default one)
            echo "Deleting Security Groups..."
            sg_ids=$(aws ec2 describe-security-groups --filters Name=vpc-id,Values=$vpc_id --query 'SecurityGroups[?GroupName!=`default`].[GroupId]' --output text)
            for sg_id in $sg_ids; do
              aws ec2 delete-security-group --group-id $sg_id || echo "Failed to delete Security Group $sg_id"
            done

            # Finally, delete the VPC
            echo "Deleting VPC..."
            aws ec2 delete-vpc --vpc-id $vpc_id || echo "Failed to delete VPC $vpc_id"
          done

      - name: Wipe S3 Buckets
        run: |
          echo "Deleting S3 buckets..."
          buckets=$(aws s3 ls | awk '{print $3}')
          for bucket in $buckets; do
            echo "Processing bucket: $bucket"
            aws s3 rm s3://$bucket --recursive
            aws s3api delete-bucket --bucket $bucket || echo "Failed to delete bucket $bucket"
          done

      - name: Wipe RDS Instances and Subnet Groups
        run: |
          echo "Deleting RDS instances..."
          rds_instances=$(aws rds describe-db-instances --query 'DBInstances[*].[DBInstanceIdentifier]' --output text)
          for instance in $rds_instances; do
            aws rds delete-db-instance --db-instance-identifier $instance --skip-final-snapshot || echo "Failed to delete RDS instance $instance"
          done

          echo "Deleting RDS DB Subnet Groups..."
          subnet_groups=$(aws rds describe-db-subnet-groups --query 'DBSubnetGroups[*].[DBSubnetGroupName]' --output text)
          for group in $subnet_groups; do
            aws rds delete-db-subnet-group --db-subnet-group-name $group || echo "Failed to delete DB Subnet Group $group"
          done

      - name: Wipe ECS Clusters
        run: |
          echo "Deleting ECS clusters, services, and tasks..."
          clusters=$(aws ecs list-clusters --query 'clusterArns[]' --output text)
          for cluster in $clusters; do
            echo "Processing cluster: $cluster"
            
            services=$(aws ecs list-services --cluster $cluster --query 'serviceArns[]' --output text)
            for service in $services; do
              aws ecs update-service --cluster $cluster --service $service --desired-count 0
              aws ecs delete-service --cluster $cluster --service $service --force || echo "Failed to delete service $service in cluster $cluster"
            done
            
            tasks=$(aws ecs list-tasks --cluster $cluster --query 'taskArns[]' --output text)
            for task in $tasks; do
              aws ecs stop-task --cluster $cluster --task $task || echo "Failed to stop task $task in cluster $cluster"
            done
            
            aws ecs delete-cluster --cluster $cluster || echo "Failed to delete cluster $cluster"
          done

      - name: Wipe ECR Repositories
        run: |
          echo "Deleting ECR repositories..."
          repos=$(aws ecr describe-repositories --query 'repositories[*].[repositoryName]' --output text)
          for repo in $repos; do
            aws ecr delete-repository --repository-name $repo --force || echo "Failed to delete ECR repository $repo"
          done

      - name: Wipe CloudWatch Log Groups
        run: |
          echo "Deleting CloudWatch Log Groups..."
          log_groups=$(aws logs describe-log-groups --query 'logGroups[*].[logGroupName]' --output text)
          for log_group in $log_groups; do
            aws logs delete-log-group --log-group-name $log_group || echo "Failed to delete Log Group $log_group"
          done

      - name: Wipe IAM Roles
        run: |
          echo "Deleting IAM Roles..."
          roles=$(aws iam list-roles --query 'Roles[?starts_with(RoleName, `ecs-`) == `true`].[RoleName]' --output text)
          for role in $roles; do
            attached_policies=$(aws iam list-attached-role-policies --role-name $role --query 'AttachedPolicies[*].[PolicyArn]' --output text)
            for policy in $attached_policies; do
              aws iam detach-role-policy --role-name $role --policy-arn $policy || echo "Failed to detach policy $policy from role $role"
            done
            aws iam delete-role --role-name $role || echo "Failed to delete IAM role $role"
          done

      - name: Wipe Load Balancers and Target Groups
        run: |
          echo "Deleting Application Load Balancers..."
          albs=$(aws elbv2 describe-load-balancers --query 'LoadBalancers[*].[LoadBalancerArn]' --output text)
          for alb in $albs; do
            aws elbv2 delete-load-balancer --load-balancer-arn $alb || echo "Failed to delete Load Balancer $alb"
          done

          echo "Deleting Target Groups..."
          target_groups=$(aws elbv2 describe-target-groups --query 'TargetGroups[*].[TargetGroupArn]' --output text)
          for tg in $target_groups; do
            aws elbv2 delete-target-group --target-group-arn $tg || echo "Failed to delete Target Group $tg"
          done

      - name: Wipe Route 53 Resources
        run: |
          echo "Deleting Route 53 resources..."
          hosted_zones=$(aws route53 list-hosted-zones --query 'HostedZones[*].[Id]' --output text)
          for zone in $hosted_zones; do
            echo "Processing hosted zone: $zone"
            
            record_sets=$(aws route53 list-resource-record-sets --hosted-zone-id $zone --query "ResourceRecordSets[?Type!='SOA']|[?Type!='NS']" --output text)
            if [ -n "$record_sets" ]; then
              echo "Deleting record sets in zone $zone"
              aws route53 change-resource-record-sets --hosted-zone-id $zone --change-batch '{
                "Changes": [
                  {
                    "Action": "DELETE",
                    "ResourceRecordSet": '"$record_sets"'
                  }
                ]
              }' || echo "Failed to delete record sets in zone $zone"
            fi
            
            aws route53 delete-hosted-zone --id $zone || echo "Failed to delete hosted zone $zone"
          done

      - name: Final Message
        run: |
          echo "AWS resource wipe attempt completed."
          echo "Please review the logs for any resources that failed to delete."
          echo "You may need to manually delete some resources or investigate permission issues."
          echo "After ensuring all resources are properly deleted, you can use your Terraform configurations to rebuild the infrastructure if needed."
