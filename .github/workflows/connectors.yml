name: Deploy Connectors

on:
  workflow_dispatch:
    inputs:
      force_unlock:
        description: 'Force remove Terraform state lock'
        required: false
        type: boolean
        default: false
      clear_state:
        description: 'Clear Terraform state'
        required: false
        type: boolean
        default: false

jobs:
  deploy_infrastructure:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/prod' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}

    env:
      ENVIRONMENT: ${{ github.ref == 'refs/heads/prod' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set Environment Variables
        run: |
          echo "TF_STATE_BUCKET=credex-terraform-state-${{ env.ENVIRONMENT }}" >> $GITHUB_ENV
          echo "TF_LOCK_TABLE=credex-terraform-lock-${{ env.ENVIRONMENT }}" >> $GITHUB_ENV

      - name: Debug Environment Variables
        run: |
          echo "Debugging Environment Variables:"
          echo "ENVIRONMENT: ${{ env.ENVIRONMENT }}"
          echo "TF_STATE_BUCKET: ${{ env.TF_STATE_BUCKET }}"
          echo "TF_LOCK_TABLE: ${{ env.TF_LOCK_TABLE }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1

      - name: Verify S3 bucket and DynamoDB table
        run: |
          echo "Verifying S3 bucket..."
          aws s3 ls s3://${{ env.TF_STATE_BUCKET }} || echo "S3 bucket not found or no access"
          
          echo "Verifying DynamoDB table..."
          aws dynamodb describe-table --table-name ${{ env.TF_LOCK_TABLE }} || echo "DynamoDB table not found or no access"

      - name: Remove Terraform State Lock
        if: github.event.inputs.force_unlock == 'true'
        run: |
          aws dynamodb delete-item \
            --table-name ${{ env.TF_LOCK_TABLE }} \
            --key '{"LockID": {"S": "${{ env.TF_STATE_BUCKET }}/${{ env.ENVIRONMENT }}/terraform.tfstate-md5"}}'
          echo "Terraform state lock removed (if it existed)"

      - name: Clear Terraform State
        if: github.event.inputs.clear_state == 'true'
        run: |
          aws s3 rm s3://${{ env.TF_STATE_BUCKET }}/${{ env.ENVIRONMENT }}/terraform.tfstate
          echo "Terraform state cleared (if it existed)"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init and Apply
        env:
          TF_VAR_environment: ${{ env.ENVIRONMENT }}
          TF_VAR_terraform_state_bucket: ${{ env.TF_STATE_BUCKET }}
          TF_VAR_terraform_lock_table: ${{ env.TF_LOCK_TABLE }}
          TF_VAR_create_ecr: "true"
          TF_VAR_create_ecs_cluster: "true"
          TF_VAR_create_log_group: "true"
          TF_VAR_create_key_pair: "true"
          TF_VAR_create_iam_roles: "true"
          TF_VAR_create_load_balancer: "true"
          TF_VAR_create_target_group: "true"
          TF_VAR_create_security_groups: "true"
          TF_VAR_create_neo4j_instances: "true"
        run: |
          cd terraform
          echo "Initializing Terraform..."
          terraform init -input=false \
            -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ env.ENVIRONMENT }}/terraform.tfstate" \
            -backend-config="region=af-south-1" \
            -backend-config="dynamodb_table=${{ env.TF_LOCK_TABLE }}"
          
          if [ $? -ne 0 ]; then
            echo "Terraform init failed"
            exit 1
          fi
          
          echo "Setting Terraform workspace..."
          terraform workspace select ${{ env.ENVIRONMENT }} || terraform workspace new ${{ env.ENVIRONMENT }}
          
          if [ $? -ne 0 ]; then
            echo "Failed to set Terraform workspace"
            exit 1
          fi
          
          echo "Applying Terraform changes..."
          terraform apply -auto-approve -input=false
          
          if [ $? -ne 0 ]; then
            echo "Terraform apply failed"
            exit 1
          fi
          
          echo "Terraform apply completed successfully"

      - name: Get Infrastructure Outputs
        run: |
          cd terraform
          echo "Retrieving infrastructure outputs..."
          terraform output || { echo "Failed to retrieve Terraform outputs"; exit 1; }
          echo "VPC_ID=$(terraform output -raw vpc_id)" >> $GITHUB_ENV || true
          echo "SUBNET_IDS=$(terraform output -raw subnet_ids)" >> $GITHUB_ENV || true
          echo "NEO4J_SECURITY_GROUP_ID=$(terraform output -raw neo4j_security_group_id)" >> $GITHUB_ENV || true
          echo "KEY_PAIR_NAME=$(terraform output -raw key_pair_name)" >> $GITHUB_ENV || true
          echo "ALB_SECURITY_GROUP_ID=$(terraform output -raw alb_security_group_id)" >> $GITHUB_ENV || true
          echo "ECS_TASKS_SECURITY_GROUP_ID=$(terraform output -raw ecs_tasks_security_group_id)" >> $GITHUB_ENV || true
          echo "ALB_DNS_NAME=$(terraform output -raw alb_dns_name)" >> $GITHUB_ENV || true
          echo "TARGET_GROUP_ARN=$(terraform output -raw target_group_arn)" >> $GITHUB_ENV || true

      - name: Print Infrastructure Information
        run: |
          echo "Infrastructure deployed for the ${{ env.ENVIRONMENT }} environment:"
          echo "VPC_ID: ${{ env.VPC_ID }}"
          echo "SUBNET_IDS: ${{ env.SUBNET_IDS }}"
          echo "NEO4J_SECURITY_GROUP_ID: ${{ env.NEO4J_SECURITY_GROUP_ID }}"
          echo "KEY_PAIR_NAME: ${{ env.KEY_PAIR_NAME }}"
          echo "ALB_SECURITY_GROUP_ID: ${{ env.ALB_SECURITY_GROUP_ID }}"
          echo "ECS_TASKS_SECURITY_GROUP_ID: ${{ env.ECS_TASKS_SECURITY_GROUP_ID }}"
          echo "ALB_DNS_NAME: ${{ env.ALB_DNS_NAME }}"
          echo "TARGET_GROUP_ARN: ${{ env.TARGET_GROUP_ARN }}"
